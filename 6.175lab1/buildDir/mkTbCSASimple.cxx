/*
 * Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
 * 
 * On Fri Jul 12 22:03:36 CST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbCSASimple.h"


/* String declarations */
static std::string const __str_literal_2("%d + %d = %d", 12u);
static std::string const __str_literal_3("FAILED %d + %d gave %d instead of %d", 36u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbCSASimple::MOD_mkTbCSASimple(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbCSASimple::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "RL_test", SYM_RULE);
}


/* Rule actions */

void MOD_mkTbCSASimple::RL_test()
{
  tUInt32 DEF_x__h4531;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d42;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d38;
  tUInt8 DEF_b__h327;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d34;
  tUInt8 DEF_a__h326;
  tUInt8 DEF_b__h329;
  tUInt8 DEF_a__h328;
  tUInt8 DEF_b__h4160;
  tUInt8 DEF_a__h4159;
  tUInt8 DEF_b__h4206;
  tUInt8 DEF_a__h4205;
  tUInt8 DEF_b__h4252;
  tUInt8 DEF_a__h4251;
  tUInt8 DEF_b__h4298;
  tUInt8 DEF_a__h4297;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d19;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d26;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d15;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d28;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3_ETC___d11;
  tUInt8 DEF_a__h4249;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d43;
  tUInt8 DEF_b__h4250;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d61;
  tUInt8 DEF_b__h4204;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d50;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d39;
  tUInt8 DEF_a__h4203;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d63;
  tUInt8 DEF_b__h4158;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d52;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d35;
  tUInt8 DEF_a__h4157;
  tUInt8 DEF_sel__h195;
  tUInt8 DEF_a__h330;
  tUInt8 DEF_NOT_cycle_EQ_8_AND_INV_SEL_ARR_1_8_63_102_177__ETC___d105;
  tUInt8 DEF_NOT_cycle_EQ_8___d3;
  tUInt8 DEF_NOT_cycle_EQ_8_AND_NOT_INV_SEL_ARR_1_8_63_102__ETC___d107;
  tUInt32 DEF_realAns__h4368;
  tUInt32 DEF_v__h186;
  tUInt8 DEF_INV_SEL_ARR_1_8_63_102_177_128_255_255_cycle_B_ETC___d104;
  tUInt8 DEF_cycle_EQ_8___d2;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d46;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d56;
  tUInt8 DEF_c_in__h2600;
  tUInt8 DEF_c_in__h1531;
  tUInt8 DEF_c_in__h3669;
  tUInt8 DEF_a__h4295;
  tUInt8 DEF_b__h4296;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_0___d21;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_1___d17;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_2___d13;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_3___d9;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_4___d45;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_5___d41;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_6___d37;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_7___d33;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_0___d20;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1___d16;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2___d12;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3___d6;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4___d44;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5___d40;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6___d36;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7___d32;
  tUInt32 DEF_x__h860;
  DEF_x__h860 = INST_cycle.METH_read();
  switch (DEF_x__h860) {
  case 0u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)1u;
    break;
  case 1u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)8u;
    break;
  case 2u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)63u;
    break;
  case 3u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)102u;
    break;
  case 4u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)177u;
    break;
  case 5u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)128u;
    break;
  case 6u:
  case 7u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)255u;
    break;
  default:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)170u;
  }
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7___d32 = (tUInt8)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 7u);
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6___d36 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 6u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5___d40 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 5u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4___d44 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 4u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3___d6 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 3u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2___d12 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 2u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1___d16 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 1u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_0___d20 = (tUInt8)((tUInt8)1u & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5);
  switch (DEF_x__h860) {
  case 0u:
  case 6u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)1u;
    break;
  case 1u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)8u;
    break;
  case 2u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)27u;
    break;
  case 3u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)92u;
    break;
  case 4u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)202u;
    break;
  case 5u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)128u;
    break;
  case 7u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)255u;
    break;
  default:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)170u;
  }
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_7___d33 = (tUInt8)(DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 7u);
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_6___d37 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 6u));
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_5___d41 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 5u));
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_4___d45 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 4u));
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_3___d9 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 3u));
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_2___d13 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 2u));
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_1___d17 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 1u));
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_0___d21 = (tUInt8)((tUInt8)1u & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8);
  DEF_c_in__h1531 = (tUInt8)((tUInt8)1u & ((DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_0___d20 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_0___d21 ? (tUInt8)2u : (tUInt8)0u) >> 1u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d56 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4___d44 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_4___d45;
  DEF_b__h4296 = (tUInt8)((tUInt8)1u & ((tUInt8)1u & ~DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d56 ? (tUInt8)1u : (tUInt8)0u));
  DEF_a__h4295 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d56 ? (tUInt8)1u : (tUInt8)0u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d46 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4___d44 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_4___d45;
  DEF_c_in__h3669 = (tUInt8)((tUInt8)1u & ((DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d46 | DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d56 ? (tUInt8)3u : (tUInt8)1u) >> 1u));
  DEF_c_in__h2600 = (tUInt8)((tUInt8)1u & ((DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d46 ? (tUInt8)2u : (tUInt8)0u) >> 1u));
  DEF_cycle_EQ_8___d2 = DEF_x__h860 == 8u;
  DEF_realAns__h4368 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8))));
  DEF_NOT_cycle_EQ_8___d3 = !DEF_cycle_EQ_8___d2;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d35 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7___d32 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_7___d33;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d39 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6___d36 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_6___d37;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d43 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5___d40 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_5___d41;
  DEF_b__h4250 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d43 ^ DEF_c_in__h3669;
  DEF_a__h4249 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d43 ^ DEF_c_in__h2600;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3_ETC___d11 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3___d6 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_3___d9;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d15 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2___d12 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_2___d13;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d19 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1___d16 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_1___d17;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d26 = (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1___d16 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_1___d17) | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d19 & DEF_c_in__h1531);
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d28 = (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2___d12 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_2___d13) | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d15 & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d26);
  DEF_sel__h195 = (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3___d6 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_3___d9) | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3_ETC___d11 & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d28);
  DEF_a__h330 = (tUInt8)1u & ~DEF_sel__h195;
  DEF_a__h4297 = DEF_a__h330 & DEF_a__h4295;
  DEF_b__h4298 = DEF_sel__h195 & DEF_b__h4296;
  DEF_a__h4251 = DEF_a__h330 & DEF_a__h4249;
  DEF_b__h4252 = DEF_sel__h195 & DEF_b__h4250;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d34 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7___d32 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_7___d33;
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_cycle_EQ_8___d2)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d38 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6___d36 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_6___d37;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d42 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5___d40 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_5___d41;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d50 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d42 | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d43 & DEF_c_in__h2600);
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d52 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d38 | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d39 & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d50);
  DEF_a__h4157 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d35 ^ DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d52;
  DEF_a__h4203 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d39 ^ DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d50;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d61 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d42 | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d43 & DEF_c_in__h3669);
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d63 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d38 | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d39 & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d61);
  DEF_b__h4158 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d35 ^ DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d63;
  DEF_b__h4204 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d39 ^ DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d61;
  DEF_a__h4205 = DEF_a__h330 & DEF_a__h4203;
  DEF_b__h4206 = DEF_sel__h195 & DEF_b__h4204;
  DEF_a__h4159 = DEF_a__h330 & DEF_a__h4157;
  DEF_b__h4160 = DEF_sel__h195 & DEF_b__h4158;
  DEF_a__h326 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d34 | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d35 & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d52);
  DEF_a__h328 = DEF_a__h330 & DEF_a__h326;
  DEF_b__h327 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d34 | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d35 & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d63);
  DEF_b__h329 = DEF_sel__h195 & DEF_b__h327;
  DEF_v__h186 = 511u & (((((((((((tUInt32)(DEF_a__h328 | DEF_b__h329)) << 8u) | (((tUInt32)(DEF_a__h4159 | DEF_b__h4160)) << 7u)) | (((tUInt32)(DEF_a__h4205 | DEF_b__h4206)) << 6u)) | (((tUInt32)(DEF_a__h4251 | DEF_b__h4252)) << 5u)) | (((tUInt32)(DEF_a__h4297 | DEF_b__h4298)) << 4u)) | (((tUInt32)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3_ETC___d11 ^ DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d28)) << 3u)) | (((tUInt32)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d15 ^ DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d26)) << 2u)) | (((tUInt32)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d19 ^ DEF_c_in__h1531)) << 1u)) | (tUInt32)((tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_0___d20 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_0___d21 ? (tUInt8)1u : (tUInt8)0u))));
  DEF_INV_SEL_ARR_1_8_63_102_177_128_255_255_cycle_B_ETC___d104 = DEF_v__h186 == DEF_realAns__h4368;
  DEF_NOT_cycle_EQ_8_AND_NOT_INV_SEL_ARR_1_8_63_102__ETC___d107 = DEF_NOT_cycle_EQ_8___d3 && !DEF_INV_SEL_ARR_1_8_63_102_177_128_255_255_cycle_B_ETC___d104;
  DEF_NOT_cycle_EQ_8_AND_INV_SEL_ARR_1_8_63_102_177__ETC___d105 = DEF_NOT_cycle_EQ_8___d3 && DEF_INV_SEL_ARR_1_8_63_102_177_128_255_255_cycle_B_ETC___d104;
  DEF_x__h4531 = DEF_x__h860 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_cycle_EQ_8___d2)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_NOT_cycle_EQ_8_AND_INV_SEL_ARR_1_8_63_102_177__ETC___d105)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9",
		     &__str_literal_2,
		     DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5,
		     DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8,
		     DEF_v__h186);
    if (DEF_NOT_cycle_EQ_8_AND_NOT_INV_SEL_ARR_1_8_63_102__ETC___d107)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9,9",
		     &__str_literal_3,
		     DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5,
		     DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8,
		     DEF_v__h186,
		     DEF_realAns__h4368);
    if (DEF_NOT_cycle_EQ_8_AND_NOT_INV_SEL_ARR_1_8_63_102__ETC___d107)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_cycle.METH_write(DEF_x__h4531);
}


/* Methods */


/* Reset routines */

void MOD_mkTbCSASimple::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbCSASimple::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbCSASimple::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbCSASimple::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 2u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_cycle.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbCSASimple::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbCSASimple &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbCSASimple::vcd_defs(tVCDDumpType dt, MOD_mkTbCSASimple &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkTbCSASimple::vcd_prims(tVCDDumpType dt, MOD_mkTbCSASimple &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
}
