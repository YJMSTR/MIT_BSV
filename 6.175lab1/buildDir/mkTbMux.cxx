/*
 * Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
 * 
 * On Fri Jul 12 21:23:31 CST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbMux.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("FAILED Sel %b from %d, %d gave %d instead of %d", 47u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbMux::MOD_mkTbMux(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    INST_randomSel_ignore(simHdl, "randomSel_ignore", this, 1u, (tUInt8)0u),
    INST_randomSel_initialized(simHdl, "randomSel_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomSel_zaz(simHdl, "randomSel_zaz", this, 1u, (tUInt8)0u),
    INST_randomVal1_ignore(simHdl, "randomVal1_ignore", this, 5u, (tUInt8)0u),
    INST_randomVal1_initialized(simHdl, "randomVal1_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal1_zaz(simHdl, "randomVal1_zaz", this, 5u, (tUInt8)0u),
    INST_randomVal2_ignore(simHdl, "randomVal2_ignore", this, 5u, (tUInt8)0u),
    INST_randomVal2_initialized(simHdl, "randomVal2_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_randomVal2_zaz(simHdl, "randomVal2_zaz", this, 5u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h691(2863311530u),
    DEF_v__h315(2863311530u),
    DEF_v__h1064(2863311530u)
{
  symbol_count = 19u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbMux::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "RL_randomSel_every", SYM_RULE);
  init_symbol(&symbols[2u], "RL_randomSel_every_1", SYM_RULE);
  init_symbol(&symbols[3u], "RL_randomVal1_every", SYM_RULE);
  init_symbol(&symbols[4u], "RL_randomVal1_every_1", SYM_RULE);
  init_symbol(&symbols[5u], "RL_randomVal2_every", SYM_RULE);
  init_symbol(&symbols[6u], "RL_randomVal2_every_1", SYM_RULE);
  init_symbol(&symbols[7u], "RL_test", SYM_RULE);
  init_symbol(&symbols[8u], "randomSel_ignore", SYM_MODULE, &INST_randomSel_ignore);
  init_symbol(&symbols[9u], "randomSel_initialized", SYM_MODULE, &INST_randomSel_initialized);
  init_symbol(&symbols[10u], "randomSel_zaz", SYM_MODULE, &INST_randomSel_zaz);
  init_symbol(&symbols[11u], "randomVal1_ignore", SYM_MODULE, &INST_randomVal1_ignore);
  init_symbol(&symbols[12u], "randomVal1_initialized", SYM_MODULE, &INST_randomVal1_initialized);
  init_symbol(&symbols[13u], "randomVal1_zaz", SYM_MODULE, &INST_randomVal1_zaz);
  init_symbol(&symbols[14u], "randomVal2_ignore", SYM_MODULE, &INST_randomVal2_ignore);
  init_symbol(&symbols[15u], "randomVal2_initialized", SYM_MODULE, &INST_randomVal2_initialized);
  init_symbol(&symbols[16u], "randomVal2_zaz", SYM_MODULE, &INST_randomVal2_zaz);
  init_symbol(&symbols[17u], "x__h1350", SYM_DEF, &DEF_x__h1350, 32u);
  init_symbol(&symbols[18u], "x_wget__h1007", SYM_DEF, &DEF_x_wget__h1007, 1u);
}


/* Rule actions */

void MOD_mkTbMux::RL_randomVal1_every()
{
  tUInt8 DEF_new_value__h357;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h315 = rand32();
  DEF_new_value__h357 = (tUInt8)((tUInt8)31u & DEF_v__h315);
  INST_randomVal1_zaz.METH_wset(DEF_new_value__h357);
}

void MOD_mkTbMux::RL_randomVal1_every_1()
{
  DEF_x_wget__h250 = INST_randomVal1_zaz.METH_wget();
  DEF_v__h389 = INST_randomVal1_zaz.METH_whas() ? DEF_x_wget__h250 : (tUInt8)0u;
  INST_randomVal1_ignore.METH_wset(DEF_v__h389);
}

void MOD_mkTbMux::RL_randomVal2_every()
{
  tUInt8 DEF_new_value__h733;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h691 = rand32();
  DEF_new_value__h733 = (tUInt8)((tUInt8)31u & DEF_v__h691);
  INST_randomVal2_zaz.METH_wset(DEF_new_value__h733);
}

void MOD_mkTbMux::RL_randomVal2_every_1()
{
  DEF_x_wget__h634 = INST_randomVal2_zaz.METH_wget();
  DEF_v__h764 = INST_randomVal2_zaz.METH_whas() ? DEF_x_wget__h634 : (tUInt8)0u;
  INST_randomVal2_ignore.METH_wset(DEF_v__h764);
}

void MOD_mkTbMux::RL_randomSel_every()
{
  tUInt8 DEF_new_value__h1106;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h1064 = rand32();
  DEF_new_value__h1106 = (tUInt8)((tUInt8)1u & DEF_v__h1064);
  INST_randomSel_zaz.METH_wset(DEF_new_value__h1106);
}

void MOD_mkTbMux::RL_randomSel_every_1()
{
  DEF_x_wget__h1007 = INST_randomSel_zaz.METH_wget();
  DEF_randomSel_zaz_whas____d19 = INST_randomSel_zaz.METH_whas();
  DEF_v__h1137 = DEF_randomSel_zaz_whas____d19 && DEF_x_wget__h1007;
  INST_randomSel_ignore.METH_wset(DEF_v__h1137);
}

void MOD_mkTbMux::RL_test()
{
  tUInt32 DEF_x__h2068;
  tUInt8 DEF_b__h1764;
  tUInt8 DEF_a__h1763;
  tUInt8 DEF_b__h1716;
  tUInt8 DEF_a__h1715;
  tUInt8 DEF_b__h1812;
  tUInt8 DEF_a__h1811;
  tUInt8 DEF_b__h1860;
  tUInt8 DEF_a__h1859;
  tUInt8 DEF_b__h1908;
  tUInt8 DEF_a__h1907;
  tUInt8 DEF_a__h1717;
  tUInt8 DEF_NOT_cycle_2_EQ_0_3_4_AND_NOT_cycle_2_EQ_128_4__ETC___d68;
  tUInt8 DEF_test__h1580;
  tUInt8 DEF_realAns__h1581;
  tUInt8 DEF_b__h1906;
  tUInt8 DEF_b__h1858;
  tUInt8 DEF_b__h1810;
  tUInt8 DEF_b__h1762;
  tUInt8 DEF_b__h1714;
  tUInt8 DEF_a__h1905;
  tUInt8 DEF_a__h1857;
  tUInt8 DEF_a__h1809;
  tUInt8 DEF_a__h1761;
  tUInt8 DEF_a__h1713;
  DEF_x_wget__h634 = INST_randomVal2_zaz.METH_wget();
  DEF_x_wget__h250 = INST_randomVal1_zaz.METH_wget();
  DEF_v__h389 = INST_randomVal1_zaz.METH_whas() ? DEF_x_wget__h250 : (tUInt8)0u;
  DEF_v__h764 = INST_randomVal2_zaz.METH_whas() ? DEF_x_wget__h634 : (tUInt8)0u;
  DEF_randomSel_zaz_whas____d19 = INST_randomSel_zaz.METH_whas();
  DEF_x_wget__h1007 = INST_randomSel_zaz.METH_wget();
  DEF_x__h1350 = INST_cycle.METH_read();
  DEF_a__h1713 = (tUInt8)(DEF_v__h389 >> 4u);
  DEF_a__h1761 = (tUInt8)((tUInt8)1u & (DEF_v__h389 >> 3u));
  DEF_a__h1809 = (tUInt8)((tUInt8)1u & (DEF_v__h389 >> 2u));
  DEF_a__h1857 = (tUInt8)((tUInt8)1u & (DEF_v__h389 >> 1u));
  DEF_a__h1905 = (tUInt8)((tUInt8)1u & DEF_v__h389);
  DEF_b__h1762 = (tUInt8)((tUInt8)1u & (DEF_v__h764 >> 3u));
  DEF_b__h1714 = (tUInt8)(DEF_v__h764 >> 4u);
  DEF_b__h1810 = (tUInt8)((tUInt8)1u & (DEF_v__h764 >> 2u));
  DEF_b__h1906 = (tUInt8)((tUInt8)1u & DEF_v__h764);
  DEF_b__h1858 = (tUInt8)((tUInt8)1u & (DEF_v__h764 >> 1u));
  DEF_NOT_randomSel_zaz_whas__9_5_OR_NOT_randomSel_z_ETC___d27 = !DEF_randomSel_zaz_whas____d19 || !DEF_x_wget__h1007;
  DEF_realAns__h1581 = DEF_NOT_randomSel_zaz_whas__9_5_OR_NOT_randomSel_z_ETC___d27 ? DEF_v__h389 : DEF_v__h764;
  DEF_cycle_2_EQ_128___d24 = DEF_x__h1350 == 128u;
  DEF_cycle_2_EQ_0___d23 = DEF_x__h1350 == 0u;
  DEF_v__h1137 = DEF_randomSel_zaz_whas____d19 && DEF_x_wget__h1007;
  DEF_a__h1717 = (tUInt8)1u & ~DEF_v__h1137;
  DEF_a__h1907 = DEF_a__h1717 & DEF_a__h1905;
  DEF_b__h1908 = DEF_v__h1137 & DEF_b__h1906;
  DEF_a__h1859 = DEF_a__h1717 & DEF_a__h1857;
  DEF_b__h1860 = DEF_v__h1137 & DEF_b__h1858;
  DEF_a__h1811 = DEF_a__h1717 & DEF_a__h1809;
  DEF_a__h1715 = DEF_a__h1717 & DEF_a__h1713;
  DEF_b__h1812 = DEF_v__h1137 & DEF_b__h1810;
  DEF_b__h1716 = DEF_v__h1137 & DEF_b__h1714;
  DEF_a__h1763 = DEF_a__h1717 & DEF_a__h1761;
  DEF_b__h1764 = DEF_v__h1137 & DEF_b__h1762;
  DEF_test__h1580 = (tUInt8)31u & ((((((DEF_a__h1715 | DEF_b__h1716) << 4u) | ((DEF_a__h1763 | DEF_b__h1764) << 3u)) | ((DEF_a__h1811 | DEF_b__h1812) << 2u)) | ((DEF_a__h1859 | DEF_b__h1860) << 1u)) | (DEF_a__h1907 | DEF_b__h1908));
  DEF_NOT_cycle_2_EQ_0_3_4_AND_NOT_cycle_2_EQ_128_4__ETC___d68 = !DEF_cycle_2_EQ_0___d23 && (!DEF_cycle_2_EQ_128___d24 && !(DEF_test__h1580 == DEF_realAns__h1581));
  DEF_x__h2068 = DEF_x__h1350 + 1u;
  if (DEF_cycle_2_EQ_0___d23)
    INST_randomVal1_initialized.METH_write((tUInt8)1u);
  if (DEF_cycle_2_EQ_0___d23)
    INST_randomSel_initialized.METH_write((tUInt8)1u);
  if (DEF_cycle_2_EQ_0___d23)
    INST_randomVal2_initialized.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_cycle_2_EQ_128___d24)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_cycle_2_EQ_128___d24)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_NOT_cycle_2_EQ_0_3_4_AND_NOT_cycle_2_EQ_128_4__ETC___d68)
      dollar_display(sim_hdl,
		     this,
		     "s,1,5,5,5,5",
		     &__str_literal_2,
		     DEF_v__h1137,
		     DEF_v__h389,
		     DEF_v__h764,
		     DEF_test__h1580,
		     DEF_realAns__h1581);
    if (DEF_NOT_cycle_2_EQ_0_3_4_AND_NOT_cycle_2_EQ_128_4__ETC___d68)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_cycle.METH_write(DEF_x__h2068);
}


/* Methods */


/* Reset routines */

void MOD_mkTbMux::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_randomVal2_initialized.reset_RST(ARG_rst_in);
  INST_randomVal1_initialized.reset_RST(ARG_rst_in);
  INST_randomSel_initialized.reset_RST(ARG_rst_in);
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbMux::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbMux::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
  INST_randomSel_ignore.dump_state(indent + 2u);
  INST_randomSel_initialized.dump_state(indent + 2u);
  INST_randomSel_zaz.dump_state(indent + 2u);
  INST_randomVal1_ignore.dump_state(indent + 2u);
  INST_randomVal1_initialized.dump_state(indent + 2u);
  INST_randomVal1_zaz.dump_state(indent + 2u);
  INST_randomVal2_ignore.dump_state(indent + 2u);
  INST_randomVal2_initialized.dump_state(indent + 2u);
  INST_randomVal2_zaz.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbMux::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 25u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "NOT_randomSel_zaz_whas__9_5_OR_NOT_randomSel_z_ETC___d27", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cycle_2_EQ_0___d23", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "cycle_2_EQ_128___d24", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "randomSel_zaz_whas____d19", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1064", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1137", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h315", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h389", 5u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h691", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h764", 5u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1350", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h1007", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h250", 5u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h634", 5u);
  num = INST_cycle.dump_VCD_defs(num);
  num = INST_randomSel_ignore.dump_VCD_defs(num);
  num = INST_randomSel_initialized.dump_VCD_defs(num);
  num = INST_randomSel_zaz.dump_VCD_defs(num);
  num = INST_randomVal1_ignore.dump_VCD_defs(num);
  num = INST_randomVal1_initialized.dump_VCD_defs(num);
  num = INST_randomVal1_zaz.dump_VCD_defs(num);
  num = INST_randomVal2_ignore.dump_VCD_defs(num);
  num = INST_randomVal2_initialized.dump_VCD_defs(num);
  num = INST_randomVal2_zaz.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbMux::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbMux &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbMux::vcd_defs(tVCDDumpType dt, MOD_mkTbMux &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 5u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 5u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 5u);
    vcd_write_x(sim_hdl, num++, 5u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_NOT_randomSel_zaz_whas__9_5_OR_NOT_randomSel_z_ETC___d27) != DEF_NOT_randomSel_zaz_whas__9_5_OR_NOT_randomSel_z_ETC___d27)
      {
	vcd_write_val(sim_hdl, num, DEF_NOT_randomSel_zaz_whas__9_5_OR_NOT_randomSel_z_ETC___d27, 1u);
	backing.DEF_NOT_randomSel_zaz_whas__9_5_OR_NOT_randomSel_z_ETC___d27 = DEF_NOT_randomSel_zaz_whas__9_5_OR_NOT_randomSel_z_ETC___d27;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_cycle_2_EQ_0___d23) != DEF_cycle_2_EQ_0___d23)
      {
	vcd_write_val(sim_hdl, num, DEF_cycle_2_EQ_0___d23, 1u);
	backing.DEF_cycle_2_EQ_0___d23 = DEF_cycle_2_EQ_0___d23;
      }
      ++num;
      if ((backing.DEF_cycle_2_EQ_128___d24) != DEF_cycle_2_EQ_128___d24)
      {
	vcd_write_val(sim_hdl, num, DEF_cycle_2_EQ_128___d24, 1u);
	backing.DEF_cycle_2_EQ_128___d24 = DEF_cycle_2_EQ_128___d24;
      }
      ++num;
      if ((backing.DEF_randomSel_zaz_whas____d19) != DEF_randomSel_zaz_whas____d19)
      {
	vcd_write_val(sim_hdl, num, DEF_randomSel_zaz_whas____d19, 1u);
	backing.DEF_randomSel_zaz_whas____d19 = DEF_randomSel_zaz_whas____d19;
      }
      ++num;
      if ((backing.DEF_v__h1064) != DEF_v__h1064)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1064, 32u);
	backing.DEF_v__h1064 = DEF_v__h1064;
      }
      ++num;
      if ((backing.DEF_v__h1137) != DEF_v__h1137)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1137, 1u);
	backing.DEF_v__h1137 = DEF_v__h1137;
      }
      ++num;
      if ((backing.DEF_v__h315) != DEF_v__h315)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h315, 32u);
	backing.DEF_v__h315 = DEF_v__h315;
      }
      ++num;
      if ((backing.DEF_v__h389) != DEF_v__h389)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h389, 5u);
	backing.DEF_v__h389 = DEF_v__h389;
      }
      ++num;
      if ((backing.DEF_v__h691) != DEF_v__h691)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h691, 32u);
	backing.DEF_v__h691 = DEF_v__h691;
      }
      ++num;
      if ((backing.DEF_v__h764) != DEF_v__h764)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h764, 5u);
	backing.DEF_v__h764 = DEF_v__h764;
      }
      ++num;
      if ((backing.DEF_x__h1350) != DEF_x__h1350)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1350, 32u);
	backing.DEF_x__h1350 = DEF_x__h1350;
      }
      ++num;
      if ((backing.DEF_x_wget__h1007) != DEF_x_wget__h1007)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h1007, 1u);
	backing.DEF_x_wget__h1007 = DEF_x_wget__h1007;
      }
      ++num;
      if ((backing.DEF_x_wget__h250) != DEF_x_wget__h250)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h250, 5u);
	backing.DEF_x_wget__h250 = DEF_x_wget__h250;
      }
      ++num;
      if ((backing.DEF_x_wget__h634) != DEF_x_wget__h634)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h634, 5u);
	backing.DEF_x_wget__h634 = DEF_x_wget__h634;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_NOT_randomSel_zaz_whas__9_5_OR_NOT_randomSel_z_ETC___d27, 1u);
      backing.DEF_NOT_randomSel_zaz_whas__9_5_OR_NOT_randomSel_z_ETC___d27 = DEF_NOT_randomSel_zaz_whas__9_5_OR_NOT_randomSel_z_ETC___d27;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_cycle_2_EQ_0___d23, 1u);
      backing.DEF_cycle_2_EQ_0___d23 = DEF_cycle_2_EQ_0___d23;
      vcd_write_val(sim_hdl, num++, DEF_cycle_2_EQ_128___d24, 1u);
      backing.DEF_cycle_2_EQ_128___d24 = DEF_cycle_2_EQ_128___d24;
      vcd_write_val(sim_hdl, num++, DEF_randomSel_zaz_whas____d19, 1u);
      backing.DEF_randomSel_zaz_whas____d19 = DEF_randomSel_zaz_whas____d19;
      vcd_write_val(sim_hdl, num++, DEF_v__h1064, 32u);
      backing.DEF_v__h1064 = DEF_v__h1064;
      vcd_write_val(sim_hdl, num++, DEF_v__h1137, 1u);
      backing.DEF_v__h1137 = DEF_v__h1137;
      vcd_write_val(sim_hdl, num++, DEF_v__h315, 32u);
      backing.DEF_v__h315 = DEF_v__h315;
      vcd_write_val(sim_hdl, num++, DEF_v__h389, 5u);
      backing.DEF_v__h389 = DEF_v__h389;
      vcd_write_val(sim_hdl, num++, DEF_v__h691, 32u);
      backing.DEF_v__h691 = DEF_v__h691;
      vcd_write_val(sim_hdl, num++, DEF_v__h764, 5u);
      backing.DEF_v__h764 = DEF_v__h764;
      vcd_write_val(sim_hdl, num++, DEF_x__h1350, 32u);
      backing.DEF_x__h1350 = DEF_x__h1350;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h1007, 1u);
      backing.DEF_x_wget__h1007 = DEF_x_wget__h1007;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h250, 5u);
      backing.DEF_x_wget__h250 = DEF_x_wget__h250;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h634, 5u);
      backing.DEF_x_wget__h634 = DEF_x_wget__h634;
    }
}

void MOD_mkTbMux::vcd_prims(tVCDDumpType dt, MOD_mkTbMux &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
  INST_randomSel_ignore.dump_VCD(dt, backing.INST_randomSel_ignore);
  INST_randomSel_initialized.dump_VCD(dt, backing.INST_randomSel_initialized);
  INST_randomSel_zaz.dump_VCD(dt, backing.INST_randomSel_zaz);
  INST_randomVal1_ignore.dump_VCD(dt, backing.INST_randomVal1_ignore);
  INST_randomVal1_initialized.dump_VCD(dt, backing.INST_randomVal1_initialized);
  INST_randomVal1_zaz.dump_VCD(dt, backing.INST_randomVal1_zaz);
  INST_randomVal2_ignore.dump_VCD(dt, backing.INST_randomVal2_ignore);
  INST_randomVal2_initialized.dump_VCD(dt, backing.INST_randomVal2_initialized);
  INST_randomVal2_zaz.dump_VCD(dt, backing.INST_randomVal2_zaz);
}
