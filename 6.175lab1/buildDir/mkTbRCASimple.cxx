/*
 * Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
 * 
 * On Fri Jul 12 21:47:42 CST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbRCASimple.h"


/* String declarations */
static std::string const __str_literal_2("%d + %d = %d", 12u);
static std::string const __str_literal_3("FAILED %d + %d gave %d instead of %d", 36u);
static std::string const __str_literal_1("PASSED", 6u);


/* Constructor */
MOD_mkTbRCASimple::MOD_mkTbRCASimple(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_cycle(simHdl, "cycle", this, 32u, 0u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbRCASimple::init_symbols_0()
{
  init_symbol(&symbols[0u], "cycle", SYM_MODULE, &INST_cycle);
  init_symbol(&symbols[1u], "RL_test", SYM_RULE);
}


/* Rule actions */

void MOD_mkTbRCASimple::RL_test()
{
  tUInt8 DEF_upper_result__h191;
  tUInt32 DEF_x__h3137;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d35;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d42;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d31;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d44;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3_ETC___d27;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d23;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d50;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d19;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d52;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d15;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d54;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d11;
  tUInt8 DEF_NOT_cycle_EQ_8_AND_SEL_ARR_1_8_63_102_177_128__ETC___d77;
  tUInt8 DEF_NOT_cycle_EQ_8_AND_NOT_SEL_ARR_1_8_63_102_177__ETC___d79;
  tUInt32 DEF_realAns__h2974;
  tUInt32 DEF_v__h186;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d76;
  tUInt8 DEF_c_in__h1639;
  tUInt8 DEF_c_in__h2258;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_0___d37;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_1___d33;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_2___d29;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_3___d25;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_4___d21;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_5___d17;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_6___d13;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8;
  tUInt8 DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_7___d9;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_0___d36;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1___d32;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2___d28;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3___d24;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4___d20;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5___d16;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6___d12;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5;
  tUInt8 DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7___d6;
  tUInt32 DEF_x__h719;
  tUInt8 DEF_NOT_cycle_EQ_8___d3;
  tUInt8 DEF_cycle_EQ_8___d2;
  DEF_x__h719 = INST_cycle.METH_read();
  DEF_cycle_EQ_8___d2 = DEF_x__h719 == 8u;
  DEF_NOT_cycle_EQ_8___d3 = !DEF_cycle_EQ_8___d2;
  switch (DEF_x__h719) {
  case 0u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)1u;
    break;
  case 1u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)8u;
    break;
  case 2u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)63u;
    break;
  case 3u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)102u;
    break;
  case 4u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)177u;
    break;
  case 5u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)128u;
    break;
  case 6u:
  case 7u:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)255u;
    break;
  default:
    DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 = (tUInt8)170u;
  }
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7___d6 = (tUInt8)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 7u);
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6___d12 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 6u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5___d16 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 5u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4___d20 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 4u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3___d24 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 3u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2___d28 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 2u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1___d32 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5 >> 1u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_0___d36 = (tUInt8)((tUInt8)1u & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5);
  switch (DEF_x__h719) {
  case 0u:
  case 6u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)1u;
    break;
  case 1u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)8u;
    break;
  case 2u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)27u;
    break;
  case 3u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)92u;
    break;
  case 4u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)202u;
    break;
  case 5u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)128u;
    break;
  case 7u:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)255u;
    break;
  default:
    DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 = (tUInt8)170u;
  }
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_7___d9 = (tUInt8)(DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 7u);
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_6___d13 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 6u));
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_5___d17 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 5u));
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_3___d25 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 3u));
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_4___d21 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 4u));
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_2___d29 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 2u));
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_0___d37 = (tUInt8)((tUInt8)1u & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8);
  DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_1___d33 = (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8 >> 1u));
  DEF_c_in__h1639 = (tUInt8)((tUInt8)1u & ((DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_0___d36 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_0___d37 ? (tUInt8)2u : (tUInt8)0u) >> 1u));
  DEF_realAns__h2974 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8))));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d11 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7___d6 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_7___d9;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d15 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6___d12 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_6___d13;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d19 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5___d16 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_5___d17;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d23 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4___d20 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_4___d21;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3_ETC___d27 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3___d24 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_3___d25;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d31 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2___d28 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_2___d29;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d35 = DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1___d32 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_1___d33;
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d42 = (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1___d32 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_1___d33) | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d35 & DEF_c_in__h1639);
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d44 = (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2___d28 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_2___d29) | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d31 & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d42);
  DEF_c_in__h2258 = (tUInt8)((tUInt8)1u & ((DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3___d24 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_3___d25) | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3_ETC___d27 & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d44) ? (tUInt8)1u : (tUInt8)0u));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d50 = (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4___d20 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_4___d21) | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d23 & DEF_c_in__h2258);
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d52 = (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5___d16 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_5___d17) | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d19 & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d50);
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d54 = (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6___d12 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_6___d13) | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d15 & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d52);
  DEF_x__h3137 = DEF_x__h719 + 1u;
  DEF_upper_result__h191 = (tUInt8)31u & (((((((DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7___d6 & DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_7___d9) | (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d11 & DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d54)) << 4u) | ((DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d11 ^ DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d54) << 3u)) | ((DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_6_ETC___d15 ^ DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d52) << 2u)) | ((DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_5_ETC___d19 ^ DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d50) << 1u)) | (tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_4_ETC___d23 ^ DEF_c_in__h2258 ? (tUInt8)1u : (tUInt8)0u)));
  DEF_v__h186 = 511u & (((((((tUInt32)(DEF_upper_result__h191)) << 4u) | (((tUInt32)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_3_ETC___d27 ^ DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d44)) << 3u)) | (((tUInt32)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_2_ETC___d31 ^ DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d42)) << 2u)) | (((tUInt32)(DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_1_ETC___d35 ^ DEF_c_in__h1639)) << 1u)) | (tUInt32)((tUInt8)((tUInt8)1u & (DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_0___d36 ^ DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle_BIT_0___d37 ? (tUInt8)1u : (tUInt8)0u))));
  DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d76 = DEF_v__h186 == DEF_realAns__h2974;
  DEF_NOT_cycle_EQ_8_AND_NOT_SEL_ARR_1_8_63_102_177__ETC___d79 = DEF_NOT_cycle_EQ_8___d3 && !DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d76;
  DEF_NOT_cycle_EQ_8_AND_SEL_ARR_1_8_63_102_177_128__ETC___d77 = DEF_NOT_cycle_EQ_8___d3 && DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle_BIT_7_ETC___d76;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_cycle_EQ_8___d2)
      dollar_display(sim_hdl, this, "s", &__str_literal_1);
    if (DEF_cycle_EQ_8___d2)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_NOT_cycle_EQ_8_AND_SEL_ARR_1_8_63_102_177_128__ETC___d77)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9",
		     &__str_literal_2,
		     DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5,
		     DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8,
		     DEF_v__h186);
    if (DEF_NOT_cycle_EQ_8_AND_NOT_SEL_ARR_1_8_63_102_177__ETC___d79)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,9,9",
		     &__str_literal_3,
		     DEF_SEL_ARR_1_8_63_102_177_128_255_255_cycle___d5,
		     DEF_SEL_ARR_1_8_27_92_202_128_1_255_cycle___d8,
		     DEF_v__h186,
		     DEF_realAns__h2974);
    if (DEF_NOT_cycle_EQ_8_AND_NOT_SEL_ARR_1_8_63_102_177__ETC___d79)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_cycle.METH_write(DEF_x__h3137);
}


/* Methods */


/* Reset routines */

void MOD_mkTbRCASimple::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbRCASimple::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbRCASimple::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_cycle.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbRCASimple::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 2u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  num = INST_cycle.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbRCASimple::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbRCASimple &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbRCASimple::vcd_defs(tVCDDumpType dt, MOD_mkTbRCASimple &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}

void MOD_mkTbRCASimple::vcd_prims(tVCDDumpType dt, MOD_mkTbRCASimple &backing)
{
  INST_cycle.dump_VCD(dt, backing.INST_cycle);
}
