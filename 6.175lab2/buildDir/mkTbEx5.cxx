/*
 * Generated by Bluespec Compiler, version 2024.01-20-g9a97f9d0 (build 9a97f9d0)
 * 
 * On Fri Jul 26 03:45:12 CST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbEx5.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("    if signed: %0d * %0d DUT gave %0d", 37u);
static std::string const __str_literal_5("    if signed: %0d * %0d DUT gave %0d instead of %0d",
					 52u);
static std::string const __str_literal_3("    if unsigned: %0d * %0d DUT gave %0d", 39u);
static std::string const __str_literal_6("    if unsigned: %0d * %0d DUT gave %0d instead of %0d",
					 54u);
static std::string const __str_literal_4("FAILED case %0d", 15u);
static std::string const __str_literal_8("FAILED due to cycle limit", 25u);
static std::string const __str_literal_7("PASSED %0d test cases in %0d cycles", 35u);
static std::string const __str_literal_1("PASSED case %0d", 15u);


/* Constructor */
MOD_mkTbEx5::MOD_mkTbEx5(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_tb_cycle(simHdl, "tb_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_tb_feed_count(simHdl, "tb_feed_count", this, 32u, 0u, (tUInt8)0u),
    INST_tb_operands_fifo(simHdl, "tb_operands_fifo", this, 16u, 4u, (tUInt8)1u, 0u),
    INST_tb_randomA_ignore(simHdl, "tb_randomA_ignore", this, 8u, (tUInt8)0u),
    INST_tb_randomA_initialized(simHdl, "tb_randomA_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomA_zaz(simHdl, "tb_randomA_zaz", this, 8u, (tUInt8)0u),
    INST_tb_randomB_ignore(simHdl, "tb_randomB_ignore", this, 8u, (tUInt8)0u),
    INST_tb_randomB_initialized(simHdl, "tb_randomB_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomB_zaz(simHdl, "tb_randomB_zaz", this, 8u, (tUInt8)0u),
    INST_tb_read_count(simHdl, "tb_read_count", this, 32u, 0u, (tUInt8)0u),
    INST_test_folded_a(simHdl, "test_folded_a", this, 8u),
    INST_test_folded_b(simHdl, "test_folded_b", this, 8u),
    INST_test_folded_i(simHdl, "test_folded_i", this, 4u, (tUInt8)9u, (tUInt8)0u),
    INST_test_folded_prod(simHdl, "test_folded_prod", this, 8u),
    INST_test_folded_tp(simHdl, "test_folded_tp", this, 8u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h3374(2863311530u),
    DEF_v__h2997(2863311530u)
{
  symbol_count = 46u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbEx5::init_symbols_0()
{
  init_symbol(&symbols[0u], "_read__h162", SYM_DEF, &DEF__read__h162, 4u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_tb_feed", SYM_DEF, &DEF_CAN_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[7u], "CAN_FIRE_RL_tb_read", SYM_DEF, &DEF_CAN_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[8u],
	      "CAN_FIRE_RL_test_folded_mulStep",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_test_folded_mulStep,
	      1u);
  init_symbol(&symbols[9u], "RL_tb_feed", SYM_RULE);
  init_symbol(&symbols[10u], "RL_tb_monitor_test", SYM_RULE);
  init_symbol(&symbols[11u], "RL_tb_randomA_every", SYM_RULE);
  init_symbol(&symbols[12u], "RL_tb_randomA_every_1", SYM_RULE);
  init_symbol(&symbols[13u], "RL_tb_randomB_every", SYM_RULE);
  init_symbol(&symbols[14u], "RL_tb_randomB_every_1", SYM_RULE);
  init_symbol(&symbols[15u], "RL_tb_read", SYM_RULE);
  init_symbol(&symbols[16u], "RL_test_folded_mulStep", SYM_RULE);
  init_symbol(&symbols[17u], "tb_cycle", SYM_MODULE, &INST_tb_cycle);
  init_symbol(&symbols[18u], "tb_feed_count", SYM_MODULE, &INST_tb_feed_count);
  init_symbol(&symbols[19u], "tb_operands_fifo", SYM_MODULE, &INST_tb_operands_fifo);
  init_symbol(&symbols[20u], "tb_randomA_ignore", SYM_MODULE, &INST_tb_randomA_ignore);
  init_symbol(&symbols[21u], "tb_randomA_initialized", SYM_MODULE, &INST_tb_randomA_initialized);
  init_symbol(&symbols[22u], "tb_randomA_zaz", SYM_MODULE, &INST_tb_randomA_zaz);
  init_symbol(&symbols[23u], "tb_randomB_ignore", SYM_MODULE, &INST_tb_randomB_ignore);
  init_symbol(&symbols[24u], "tb_randomB_initialized", SYM_MODULE, &INST_tb_randomB_initialized);
  init_symbol(&symbols[25u], "tb_randomB_zaz", SYM_MODULE, &INST_tb_randomB_zaz);
  init_symbol(&symbols[26u], "tb_read_count", SYM_MODULE, &INST_tb_read_count);
  init_symbol(&symbols[27u], "test_folded_a", SYM_MODULE, &INST_test_folded_a);
  init_symbol(&symbols[28u], "test_folded_b", SYM_MODULE, &INST_test_folded_b);
  init_symbol(&symbols[29u], "test_folded_i", SYM_MODULE, &INST_test_folded_i);
  init_symbol(&symbols[30u], "test_folded_prod", SYM_MODULE, &INST_test_folded_prod);
  init_symbol(&symbols[31u], "test_folded_tp", SYM_MODULE, &INST_test_folded_tp);
  init_symbol(&symbols[32u], "v__h3071", SYM_DEF, &DEF_v__h3071, 8u);
  init_symbol(&symbols[33u], "v__h3447", SYM_DEF, &DEF_v__h3447, 8u);
  init_symbol(&symbols[34u], "WILL_FIRE_RL_tb_feed", SYM_DEF, &DEF_WILL_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[35u],
	      "WILL_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[36u],
	      "WILL_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[39u],
	      "WILL_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[40u], "WILL_FIRE_RL_tb_read", SYM_DEF, &DEF_WILL_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[41u],
	      "WILL_FIRE_RL_test_folded_mulStep",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_test_folded_mulStep,
	      1u);
  init_symbol(&symbols[42u], "x__h3859", SYM_DEF, &DEF_x__h3859, 32u);
  init_symbol(&symbols[43u], "x__h5648", SYM_DEF, &DEF_x__h5648, 32u);
  init_symbol(&symbols[44u], "x_wget__h2940", SYM_DEF, &DEF_x_wget__h2940, 8u);
  init_symbol(&symbols[45u], "x_wget__h3317", SYM_DEF, &DEF_x_wget__h3317, 8u);
}


/* Rule actions */

void MOD_mkTbEx5::RL_test_folded_mulStep()
{
  tUInt8 DEF_x__h2481;
  tUInt8 DEF_x__h239;
  tUInt8 DEF_x__h194;
  tUInt8 DEF_y__h1227;
  tUInt8 DEF_x__h1226;
  tUInt8 DEF_y__h995;
  tUInt8 DEF_x__h994;
  tUInt8 DEF_y__h1458;
  tUInt8 DEF_x__h1457;
  tUInt8 DEF_y__h1689;
  tUInt8 DEF_x__h1688;
  tUInt8 DEF_y__h1920;
  tUInt8 DEF_x__h1919;
  tUInt8 DEF_y__h2151;
  tUInt8 DEF_x__h2150;
  tUInt8 DEF_y__h2324;
  tUInt8 DEF_x__h2323;
  tUInt8 DEF_x__h674;
  tUInt8 DEF_c_in__h891;
  tUInt8 DEF_x__h902;
  tUInt8 DEF_c_in__h1123;
  tUInt8 DEF_x__h1134;
  tUInt8 DEF_c_in__h1354;
  tUInt8 DEF_x__h1365;
  tUInt8 DEF_c_in__h1585;
  tUInt8 DEF_x__h1596;
  tUInt8 DEF_c_in__h1816;
  tUInt8 DEF_x__h1827;
  tUInt8 DEF_c_in__h2047;
  tUInt8 DEF_x__h2058;
  tUInt8 DEF_a__h500;
  tUInt8 DEF_a__h661;
  tUInt8 DEF_a__h889;
  tUInt8 DEF_a__h1121;
  tUInt8 DEF_a__h1352;
  tUInt8 DEF_a__h1583;
  tUInt8 DEF_a__h1814;
  tUInt8 DEF_IF_test_folded_a_BIT_0_THEN_test_folded_b_ELSE_0___d8;
  tUInt8 DEF_a__h2045;
  tUInt8 DEF_b__h754;
  tUInt8 DEF_b__h982;
  tUInt8 DEF_b__h1214;
  tUInt8 DEF_b__h1445;
  tUInt8 DEF_b__h1676;
  tUInt8 DEF_b__h1907;
  tUInt8 DEF_b__h2138;
  tUInt8 DEF_b__h2311;
  tUInt8 DEF_c_in__h663;
  tUInt8 DEF_test_folded_a_BITS_7_TO_1___h226;
  tUInt8 DEF_test_folded_prod_BITS_7_TO_1___h2467;
  tUInt8 DEF_test_folded_a___d3;
  tUInt8 DEF__read__h71;
  DEF_test_folded_tp__h2367 = INST_test_folded_tp.METH_read();
  DEF__read__h97 = INST_test_folded_prod.METH_read();
  DEF__read__h71 = INST_test_folded_b.METH_read();
  DEF_test_folded_a___d3 = INST_test_folded_a.METH_read();
  DEF__read__h162 = INST_test_folded_i.METH_read();
  DEF_test_folded_prod_BITS_7_TO_1___h2467 = (tUInt8)(DEF__read__h97 >> 1u);
  DEF_test_folded_a_BITS_7_TO_1___h226 = (tUInt8)(DEF_test_folded_a___d3 >> 1u);
  DEF_b__h2311 = (tUInt8)(DEF_test_folded_tp__h2367 >> 7u);
  DEF_b__h2138 = (tUInt8)((tUInt8)1u & (DEF_test_folded_tp__h2367 >> 6u));
  DEF_b__h1907 = (tUInt8)((tUInt8)1u & (DEF_test_folded_tp__h2367 >> 5u));
  DEF_b__h1676 = (tUInt8)((tUInt8)1u & (DEF_test_folded_tp__h2367 >> 4u));
  DEF_b__h1445 = (tUInt8)((tUInt8)1u & (DEF_test_folded_tp__h2367 >> 3u));
  DEF_b__h982 = (tUInt8)((tUInt8)1u & (DEF_test_folded_tp__h2367 >> 1u));
  DEF_b__h1214 = (tUInt8)((tUInt8)1u & (DEF_test_folded_tp__h2367 >> 2u));
  DEF_b__h754 = (tUInt8)((tUInt8)1u & DEF_test_folded_tp__h2367);
  DEF_IF_test_folded_a_BIT_0_THEN_test_folded_b_ELSE_0___d8 = (tUInt8)((tUInt8)1u & DEF_test_folded_a___d3) ? DEF__read__h71 : (tUInt8)0u;
  DEF_a__h2045 = (tUInt8)(DEF_IF_test_folded_a_BIT_0_THEN_test_folded_b_ELSE_0___d8 >> 7u);
  DEF_a__h1814 = (tUInt8)((tUInt8)1u & (DEF_IF_test_folded_a_BIT_0_THEN_test_folded_b_ELSE_0___d8 >> 6u));
  DEF_a__h1583 = (tUInt8)((tUInt8)1u & (DEF_IF_test_folded_a_BIT_0_THEN_test_folded_b_ELSE_0___d8 >> 5u));
  DEF_a__h1121 = (tUInt8)((tUInt8)1u & (DEF_IF_test_folded_a_BIT_0_THEN_test_folded_b_ELSE_0___d8 >> 3u));
  DEF_a__h1352 = (tUInt8)((tUInt8)1u & (DEF_IF_test_folded_a_BIT_0_THEN_test_folded_b_ELSE_0___d8 >> 4u));
  DEF_a__h889 = (tUInt8)((tUInt8)1u & (DEF_IF_test_folded_a_BIT_0_THEN_test_folded_b_ELSE_0___d8 >> 2u));
  DEF_a__h661 = (tUInt8)((tUInt8)1u & (DEF_IF_test_folded_a_BIT_0_THEN_test_folded_b_ELSE_0___d8 >> 1u));
  DEF_a__h500 = (tUInt8)((tUInt8)1u & DEF_IF_test_folded_a_BIT_0_THEN_test_folded_b_ELSE_0___d8);
  DEF_c_in__h663 = (tUInt8)((tUInt8)1u & ((DEF_a__h500 & DEF_b__h754 ? 2u : 0u) >> 1u));
  DEF_x__h2058 = DEF_a__h2045 ^ DEF_b__h2311;
  DEF_x__h1827 = DEF_a__h1814 ^ DEF_b__h2138;
  DEF_x__h1596 = DEF_a__h1583 ^ DEF_b__h1907;
  DEF_x__h1365 = DEF_a__h1352 ^ DEF_b__h1676;
  DEF_x__h902 = DEF_a__h889 ^ DEF_b__h1214;
  DEF_x__h1134 = DEF_a__h1121 ^ DEF_b__h1445;
  DEF_x__h674 = DEF_a__h661 ^ DEF_b__h982;
  DEF_x__h2323 = DEF_a__h2045 & DEF_b__h2311;
  DEF_x__h2150 = DEF_a__h1814 & DEF_b__h2138;
  DEF_x__h1919 = DEF_a__h1583 & DEF_b__h1907;
  DEF_x__h1688 = DEF_a__h1352 & DEF_b__h1676;
  DEF_x__h1457 = DEF_a__h1121 & DEF_b__h1445;
  DEF_x__h994 = DEF_a__h661 & DEF_b__h982;
  DEF_y__h995 = DEF_x__h674 & DEF_c_in__h663;
  DEF_c_in__h891 = DEF_x__h994 | DEF_y__h995;
  DEF_x__h1226 = DEF_a__h889 & DEF_b__h1214;
  DEF_y__h1227 = DEF_x__h902 & DEF_c_in__h891;
  DEF_c_in__h1123 = DEF_x__h1226 | DEF_y__h1227;
  DEF_y__h1458 = DEF_x__h1134 & DEF_c_in__h1123;
  DEF_c_in__h1354 = DEF_x__h1457 | DEF_y__h1458;
  DEF_y__h1689 = DEF_x__h1365 & DEF_c_in__h1354;
  DEF_c_in__h1585 = DEF_x__h1688 | DEF_y__h1689;
  DEF_y__h1920 = DEF_x__h1596 & DEF_c_in__h1585;
  DEF_c_in__h1816 = DEF_x__h1919 | DEF_y__h1920;
  DEF_y__h2151 = DEF_x__h1827 & DEF_c_in__h1816;
  DEF_c_in__h2047 = DEF_x__h2150 | DEF_y__h2151;
  DEF_y__h2324 = DEF_x__h2058 & DEF_c_in__h2047;
  DEF_x__h2525 = (tUInt8)15u & (DEF__read__h162 + (tUInt8)1u);
  DEF_x__h194 = (tUInt8)255u & DEF_test_folded_a_BITS_7_TO_1___h226;
  DEF_x__h239 = (tUInt8)255u & ((((tUInt8)((tUInt8)1u & (DEF_a__h500 ^ DEF_b__h754 ? 1u : 0u))) << 7u) | DEF_test_folded_prod_BITS_7_TO_1___h2467);
  DEF_x__h2481 = (tUInt8)255u & (((((((((DEF_x__h2323 | DEF_y__h2324) << 7u) | ((DEF_x__h2058 ^ DEF_c_in__h2047) << 6u)) | ((DEF_x__h1827 ^ DEF_c_in__h1816) << 5u)) | ((DEF_x__h1596 ^ DEF_c_in__h1585) << 4u)) | ((DEF_x__h1365 ^ DEF_c_in__h1354) << 3u)) | ((DEF_x__h1134 ^ DEF_c_in__h1123) << 2u)) | ((DEF_x__h902 ^ DEF_c_in__h891) << 1u)) | (DEF_x__h674 ^ DEF_c_in__h663));
  INST_test_folded_a.METH_write(DEF_x__h194);
  INST_test_folded_prod.METH_write(DEF_x__h239);
  INST_test_folded_tp.METH_write(DEF_x__h2481);
  INST_test_folded_i.METH_write(DEF_x__h2525);
}

void MOD_mkTbEx5::RL_tb_randomA_every()
{
  tUInt8 DEF_new_value__h3039;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h2997 = rand32();
  DEF_new_value__h3039 = (tUInt8)((tUInt8)255u & DEF_v__h2997);
  INST_tb_randomA_zaz.METH_wset(DEF_new_value__h3039);
}

void MOD_mkTbEx5::RL_tb_randomA_every_1()
{
  DEF_x_wget__h2940 = INST_tb_randomA_zaz.METH_wget();
  DEF_v__h3071 = INST_tb_randomA_zaz.METH_whas() ? DEF_x_wget__h2940 : (tUInt8)0u;
  INST_tb_randomA_ignore.METH_wset(DEF_v__h3071);
}

void MOD_mkTbEx5::RL_tb_randomB_every()
{
  tUInt8 DEF_new_value__h3416;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h3374 = rand32();
  DEF_new_value__h3416 = (tUInt8)((tUInt8)255u & DEF_v__h3374);
  INST_tb_randomB_zaz.METH_wset(DEF_new_value__h3416);
}

void MOD_mkTbEx5::RL_tb_randomB_every_1()
{
  DEF_x_wget__h3317 = INST_tb_randomB_zaz.METH_wget();
  DEF_v__h3447 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h3317 : (tUInt8)0u;
  INST_tb_randomB_ignore.METH_wset(DEF_v__h3447);
}

void MOD_mkTbEx5::RL_tb_feed()
{
  tUInt32 DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d105;
  tUInt32 DEF_x__h3840;
  tUInt8 DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA__ETC___d104;
  DEF_x__h3859 = INST_tb_feed_count.METH_read();
  DEF_x_wget__h3317 = INST_tb_randomB_zaz.METH_wget();
  DEF_x_wget__h2940 = INST_tb_randomA_zaz.METH_wget();
  DEF_v__h3447 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h3317 : (tUInt8)0u;
  DEF_v__h3071 = INST_tb_randomA_zaz.METH_whas() ? DEF_x_wget__h2940 : (tUInt8)0u;
  DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d89 = DEF_v__h3071 == (tUInt8)128u;
  DEF_IF_tb_randomB_zaz_whas__6_THEN_tb_randomB_zaz__ETC___d90 = DEF_v__h3447 == (tUInt8)128u;
  DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA__ETC___d104 = !DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d89 && !DEF_IF_tb_randomB_zaz_whas__6_THEN_tb_randomB_zaz__ETC___d90;
  DEF_x__h3840 = DEF_x__h3859 + 1u;
  DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d105 = 65535u & ((((tUInt32)(DEF_v__h3071)) << 8u) | (tUInt32)(DEF_v__h3447));
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA__ETC___d104)
    INST_tb_operands_fifo.METH_enq(DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d105);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA__ETC___d104)
    INST_test_folded_a.METH_write(DEF_v__h3071);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA__ETC___d104)
    INST_test_folded_b.METH_write(DEF_v__h3447);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA__ETC___d104)
    INST_test_folded_i.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA__ETC___d104)
    INST_test_folded_tp.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA__ETC___d104)
    INST_test_folded_prod.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA__ETC___d104)
    INST_tb_feed_count.METH_write(DEF_x__h3840);
}

void MOD_mkTbEx5::RL_tb_read()
{
  tUInt32 DEF_x__h5524;
  tUInt8 DEF_NOT_IF_test_folded_i_EQ_8_11_THEN_test_folded__ETC___d180;
  tUInt8 DEF_mi__h4414;
  tUInt8 DEF_mi__h4355;
  tUInt8 DEF_mi__h4296;
  tUInt8 DEF_mi__h4237;
  tUInt8 DEF_mi__h4178;
  tUInt8 DEF_mi__h4119;
  tUInt8 DEF_mi__h4060;
  tUInt32 DEF_y_avValue__h3950;
  tUInt8 DEF_mi_BIT_0___h4860;
  tUInt8 DEF_mi__h4473;
  tUInt8 DEF_mi_BITS_7_TO_1___h4566;
  tUInt32 DEF__0_CONCAT_IF_tb_operands_fifo_first__16_BIT_8_1_ETC___d125;
  tUInt8 DEF_a__h4379;
  tUInt32 DEF__0_CONCAT_0_CONCAT_IF_tb_operands_fifo_first__1_ETC___d131;
  tUInt8 DEF_a__h4320;
  tUInt32 DEF__0_CONCAT_0_CONCAT_0_CONCAT_IF_tb_operands_fifo_ETC___d137;
  tUInt8 DEF_a__h4261;
  tUInt32 DEF__0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_IF_tb_oper_ETC___d143;
  tUInt8 DEF_a__h4202;
  tUInt32 DEF__0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_I_ETC___d149;
  tUInt8 DEF_a__h4143;
  tUInt32 DEF__0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0_ETC___d155;
  tUInt8 DEF_a__h4084;
  tUInt32 DEF_tb_operands_fifo_first____d116;
  tUInt8 DEF_b__h3879;
  tUInt8 DEF_signed_tb_operands_fifo_first__16_BITS_7_TO_0_18___d178;
  tUInt8 DEF_a__h3878;
  tUInt8 DEF_signed_tb_operands_fifo_first__16_BITS_15_TO__ETC___d177;
  tUInt32 DEF_v__h3903;
  tUInt32 DEF_signed_IF_test_folded_i_EQ_8_11_THEN_test_fol_ETC___d179;
  tUInt32 DEF_expected__h3955;
  tUInt32 DEF_signed_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0__ETC___d181;
  tUInt8 DEF_IF_test_folded_i_EQ_8_11_THEN_test_folded_tp_0_ETC___d175;
  DEF_x__h5648 = INST_tb_read_count.METH_read();
  DEF_tb_operands_fifo_first____d116 = INST_tb_operands_fifo.METH_first();
  DEF_a__h3878 = (tUInt8)(DEF_tb_operands_fifo_first____d116 >> 8u);
  DEF_signed_tb_operands_fifo_first__16_BITS_15_TO__ETC___d177 = DEF_a__h3878;
  DEF_b__h3879 = (tUInt8)((tUInt8)255u & DEF_tb_operands_fifo_first____d116);
  DEF_signed_tb_operands_fifo_first__16_BITS_7_TO_0_18___d178 = DEF_b__h3879;
  DEF_test_folded_tp__h2367 = INST_test_folded_tp.METH_read();
  DEF__read__h97 = INST_test_folded_prod.METH_read();
  DEF__read__h162 = INST_test_folded_i.METH_read();
  DEF_mi__h4473 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d116 >> 8u)) ? DEF_b__h3879 : (tUInt8)0u;
  DEF_mi_BITS_7_TO_1___h4566 = (tUInt8)(DEF_mi__h4473 >> 1u);
  DEF_mi_BIT_0___h4860 = (tUInt8)((tUInt8)1u & DEF_mi__h4473);
  DEF_test_folded_i_EQ_8___d111 = DEF__read__h162 == (tUInt8)8u;
  DEF_y_avValue__h3950 = 65535u & ((((tUInt32)(DEF_test_folded_tp__h2367)) << 8u) | (tUInt32)(DEF__read__h97));
  DEF_v__h3903 = DEF_test_folded_i_EQ_8___d111 ? DEF_y_avValue__h3950 : 0u;
  DEF_signed_IF_test_folded_i_EQ_8_11_THEN_test_fol_ETC___d179 = DEF_v__h3903;
  DEF_mi__h4119 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d116 >> 14u)) ? DEF_b__h3879 : (tUInt8)0u;
  DEF_mi__h4060 = (tUInt8)(DEF_tb_operands_fifo_first____d116 >> 15u) ? DEF_b__h3879 : (tUInt8)0u;
  DEF_mi__h4178 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d116 >> 13u)) ? DEF_b__h3879 : (tUInt8)0u;
  DEF_mi__h4237 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d116 >> 12u)) ? DEF_b__h3879 : (tUInt8)0u;
  DEF_mi__h4296 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d116 >> 11u)) ? DEF_b__h3879 : (tUInt8)0u;
  DEF_mi__h4355 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d116 >> 10u)) ? DEF_b__h3879 : (tUInt8)0u;
  DEF_mi__h4414 = (tUInt8)((tUInt8)1u & (DEF_tb_operands_fifo_first____d116 >> 9u)) ? DEF_b__h3879 : (tUInt8)0u;
  DEF__0_CONCAT_IF_tb_operands_fifo_first__16_BIT_8_1_ETC___d125 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 7u) | (tUInt32)(DEF_mi_BITS_7_TO_1___h4566))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_mi__h4414))));
  DEF_a__h4379 = (tUInt8)(DEF__0_CONCAT_IF_tb_operands_fifo_first__16_BIT_8_1_ETC___d125 >> 1u);
  DEF__0_CONCAT_0_CONCAT_IF_tb_operands_fifo_first__1_ETC___d131 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_a__h4379))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_mi__h4355))));
  DEF_a__h4320 = (tUInt8)(DEF__0_CONCAT_0_CONCAT_IF_tb_operands_fifo_first__1_ETC___d131 >> 1u);
  DEF__0_CONCAT_0_CONCAT_0_CONCAT_IF_tb_operands_fifo_ETC___d137 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_a__h4320))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_mi__h4296))));
  DEF_a__h4261 = (tUInt8)(DEF__0_CONCAT_0_CONCAT_0_CONCAT_IF_tb_operands_fifo_ETC___d137 >> 1u);
  DEF__0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_IF_tb_oper_ETC___d143 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_a__h4261))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_mi__h4237))));
  DEF_a__h4202 = (tUInt8)(DEF__0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_IF_tb_oper_ETC___d143 >> 1u);
  DEF__0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_I_ETC___d149 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_a__h4202))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_mi__h4178))));
  DEF_a__h4143 = (tUInt8)(DEF__0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_I_ETC___d149 >> 1u);
  DEF__0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0_ETC___d155 = 511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_a__h4143))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_mi__h4119))));
  DEF_a__h4084 = (tUInt8)(DEF__0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0_ETC___d155 >> 1u);
  DEF_expected__h3955 = 65535u & (((((((((511u & ((511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_a__h4084))) + (511u & ((((tUInt32)((tUInt8)0u)) << 8u) | (tUInt32)(DEF_mi__h4060))))) << 7u) | (((tUInt32)((tUInt8)((tUInt8)1u & DEF__0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0_ETC___d155))) << 6u)) | (((tUInt32)((tUInt8)((tUInt8)1u & DEF__0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_I_ETC___d149))) << 5u)) | (((tUInt32)((tUInt8)((tUInt8)1u & DEF__0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_IF_tb_oper_ETC___d143))) << 4u)) | (((tUInt32)((tUInt8)((tUInt8)1u & DEF__0_CONCAT_0_CONCAT_0_CONCAT_IF_tb_operands_fifo_ETC___d137))) << 3u)) | (((tUInt32)((tUInt8)((tUInt8)1u & DEF__0_CONCAT_0_CONCAT_IF_tb_operands_fifo_first__1_ETC___d131))) << 2u)) | (((tUInt32)((tUInt8)((tUInt8)1u & DEF__0_CONCAT_IF_tb_operands_fifo_first__16_BIT_8_1_ETC___d125))) << 1u)) | (tUInt32)((tUInt8)((tUInt8)1u & (DEF_mi_BIT_0___h4860 ? (tUInt8)1u : (tUInt8)0u))));
  DEF_IF_test_folded_i_EQ_8_11_THEN_test_folded_tp_0_ETC___d175 = DEF_v__h3903 == DEF_expected__h3955;
  DEF_signed_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0__ETC___d181 = DEF_expected__h3955;
  DEF_NOT_IF_test_folded_i_EQ_8_11_THEN_test_folded__ETC___d180 = !DEF_IF_test_folded_i_EQ_8_11_THEN_test_folded_tp_0_ETC___d175;
  DEF_x__h5524 = DEF_x__h5648 + 1u;
  INST_tb_operands_fifo.METH_deq();
  DEF_x__h2525 = (tUInt8)15u & (DEF__read__h162 + (tUInt8)1u);
  INST_test_folded_i.METH_write(DEF_x__h2525);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_IF_test_folded_i_EQ_8_11_THEN_test_folded_tp_0_ETC___d175)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_x__h5648);
    if (DEF_IF_test_folded_i_EQ_8_11_THEN_test_folded_tp_0_ETC___d175)
      dollar_display(sim_hdl,
		     this,
		     "s,-8,-8,-16",
		     &__str_literal_2,
		     DEF_signed_tb_operands_fifo_first__16_BITS_15_TO__ETC___d177,
		     DEF_signed_tb_operands_fifo_first__16_BITS_7_TO_0_18___d178,
		     DEF_signed_IF_test_folded_i_EQ_8_11_THEN_test_fol_ETC___d179);
    if (DEF_IF_test_folded_i_EQ_8_11_THEN_test_folded_tp_0_ETC___d175)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,16",
		     &__str_literal_3,
		     DEF_a__h3878,
		     DEF_b__h3879,
		     DEF_v__h3903);
    if (DEF_NOT_IF_test_folded_i_EQ_8_11_THEN_test_folded__ETC___d180)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_4, DEF_x__h5648);
    if (DEF_NOT_IF_test_folded_i_EQ_8_11_THEN_test_folded__ETC___d180)
      dollar_display(sim_hdl,
		     this,
		     "s,-8,-8,-16,-16",
		     &__str_literal_5,
		     DEF_signed_tb_operands_fifo_first__16_BITS_15_TO__ETC___d177,
		     DEF_signed_tb_operands_fifo_first__16_BITS_7_TO_0_18___d178,
		     DEF_signed_IF_test_folded_i_EQ_8_11_THEN_test_fol_ETC___d179,
		     DEF_signed_0_CONCAT_0_CONCAT_0_CONCAT_0_CONCAT_0__ETC___d181);
    if (DEF_NOT_IF_test_folded_i_EQ_8_11_THEN_test_folded__ETC___d180)
      dollar_display(sim_hdl,
		     this,
		     "s,8,8,16,16",
		     &__str_literal_6,
		     DEF_a__h3878,
		     DEF_b__h3879,
		     DEF_v__h3903,
		     DEF_expected__h3955);
    if (DEF_NOT_IF_test_folded_i_EQ_8_11_THEN_test_folded__ETC___d180)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_read_count.METH_write(DEF_x__h5524);
}

void MOD_mkTbEx5::RL_tb_monitor_test()
{
  tUInt32 DEF_x__h5877;
  tUInt8 DEF_tb_cycle_83_EQ_0___d184;
  tUInt8 DEF_tb_cycle_83_EQ_16384___d185;
  tUInt32 DEF_x__h5881;
  DEF_x__h5648 = INST_tb_read_count.METH_read();
  DEF_x__h5881 = INST_tb_cycle.METH_read();
  DEF_tb_cycle_83_EQ_16384___d185 = DEF_x__h5881 == 16384u;
  DEF_tb_cycle_83_EQ_0___d184 = DEF_x__h5881 == 0u;
  DEF_tb_read_count_08_EQ_128___d109 = DEF_x__h5648 == 128u;
  DEF_x__h5877 = DEF_x__h5881 + 1u;
  if (DEF_tb_cycle_83_EQ_0___d184)
    INST_tb_randomA_initialized.METH_write((tUInt8)1u);
  if (DEF_tb_cycle_83_EQ_0___d184)
    INST_tb_randomB_initialized.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_tb_read_count_08_EQ_128___d109)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_7, DEF_x__h5648, DEF_x__h5881);
    if (DEF_tb_read_count_08_EQ_128___d109)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_tb_cycle_83_EQ_16384___d185)
      dollar_display(sim_hdl, this, "s", &__str_literal_8);
    if (DEF_tb_cycle_83_EQ_16384___d185)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_cycle.METH_write(DEF_x__h5877);
}


/* Methods */


/* Reset routines */

void MOD_mkTbEx5::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_test_folded_i.reset_RST(ARG_rst_in);
  INST_tb_read_count.reset_RST(ARG_rst_in);
  INST_tb_randomB_initialized.reset_RST(ARG_rst_in);
  INST_tb_randomA_initialized.reset_RST(ARG_rst_in);
  INST_tb_operands_fifo.reset_RST(ARG_rst_in);
  INST_tb_feed_count.reset_RST(ARG_rst_in);
  INST_tb_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbEx5::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbEx5::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_tb_cycle.dump_state(indent + 2u);
  INST_tb_feed_count.dump_state(indent + 2u);
  INST_tb_operands_fifo.dump_state(indent + 2u);
  INST_tb_randomA_ignore.dump_state(indent + 2u);
  INST_tb_randomA_initialized.dump_state(indent + 2u);
  INST_tb_randomA_zaz.dump_state(indent + 2u);
  INST_tb_randomB_ignore.dump_state(indent + 2u);
  INST_tb_randomB_initialized.dump_state(indent + 2u);
  INST_tb_randomB_zaz.dump_state(indent + 2u);
  INST_tb_read_count.dump_state(indent + 2u);
  INST_test_folded_a.dump_state(indent + 2u);
  INST_test_folded_b.dump_state(indent + 2u);
  INST_test_folded_i.dump_state(indent + 2u);
  INST_test_folded_prod.dump_state(indent + 2u);
  INST_test_folded_tp.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbEx5::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 48u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_test_folded_mulStep", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d89", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomB_zaz_whas__6_THEN_tb_randomB_zaz__ETC___d90", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_test_folded_mulStep", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h162", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h97", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_read_count_08_EQ_128___d109", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "test_folded_i_EQ_8___d111", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "test_folded_tp__h2367", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h2997", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h3071", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h3374", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h3447", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2525", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h3859", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h5648", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h2940", 8u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h3317", 8u);
  num = INST_tb_cycle.dump_VCD_defs(num);
  num = INST_tb_feed_count.dump_VCD_defs(num);
  num = INST_tb_operands_fifo.dump_VCD_defs(num);
  num = INST_tb_randomA_ignore.dump_VCD_defs(num);
  num = INST_tb_randomA_initialized.dump_VCD_defs(num);
  num = INST_tb_randomA_zaz.dump_VCD_defs(num);
  num = INST_tb_randomB_ignore.dump_VCD_defs(num);
  num = INST_tb_randomB_initialized.dump_VCD_defs(num);
  num = INST_tb_randomB_zaz.dump_VCD_defs(num);
  num = INST_tb_read_count.dump_VCD_defs(num);
  num = INST_test_folded_a.dump_VCD_defs(num);
  num = INST_test_folded_b.dump_VCD_defs(num);
  num = INST_test_folded_i.dump_VCD_defs(num);
  num = INST_test_folded_prod.dump_VCD_defs(num);
  num = INST_test_folded_tp.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbEx5::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbEx5 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbEx5::vcd_defs(tVCDDumpType dt, MOD_mkTbEx5 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 8u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_tb_feed) != DEF_CAN_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_feed, 1u);
	backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_monitor_test) != DEF_CAN_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every) != DEF_CAN_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every_1) != DEF_CAN_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every) != DEF_CAN_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every_1) != DEF_CAN_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_read) != DEF_CAN_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_read, 1u);
	backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_test_folded_mulStep) != DEF_CAN_FIRE_RL_test_folded_mulStep)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_test_folded_mulStep, 1u);
	backing.DEF_CAN_FIRE_RL_test_folded_mulStep = DEF_CAN_FIRE_RL_test_folded_mulStep;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d89) != DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d89)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d89, 1u);
	backing.DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d89 = DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d89;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomB_zaz_whas__6_THEN_tb_randomB_zaz__ETC___d90) != DEF_IF_tb_randomB_zaz_whas__6_THEN_tb_randomB_zaz__ETC___d90)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomB_zaz_whas__6_THEN_tb_randomB_zaz__ETC___d90, 1u);
	backing.DEF_IF_tb_randomB_zaz_whas__6_THEN_tb_randomB_zaz__ETC___d90 = DEF_IF_tb_randomB_zaz_whas__6_THEN_tb_randomB_zaz__ETC___d90;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_feed) != DEF_WILL_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_feed, 1u);
	backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_monitor_test) != DEF_WILL_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every) != DEF_WILL_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every_1) != DEF_WILL_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every) != DEF_WILL_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every_1) != DEF_WILL_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_read) != DEF_WILL_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_read, 1u);
	backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_test_folded_mulStep) != DEF_WILL_FIRE_RL_test_folded_mulStep)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_test_folded_mulStep, 1u);
	backing.DEF_WILL_FIRE_RL_test_folded_mulStep = DEF_WILL_FIRE_RL_test_folded_mulStep;
      }
      ++num;
      if ((backing.DEF__read__h162) != DEF__read__h162)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h162, 4u);
	backing.DEF__read__h162 = DEF__read__h162;
      }
      ++num;
      if ((backing.DEF__read__h97) != DEF__read__h97)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h97, 8u);
	backing.DEF__read__h97 = DEF__read__h97;
      }
      ++num;
      if ((backing.DEF_tb_read_count_08_EQ_128___d109) != DEF_tb_read_count_08_EQ_128___d109)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_read_count_08_EQ_128___d109, 1u);
	backing.DEF_tb_read_count_08_EQ_128___d109 = DEF_tb_read_count_08_EQ_128___d109;
      }
      ++num;
      if ((backing.DEF_test_folded_i_EQ_8___d111) != DEF_test_folded_i_EQ_8___d111)
      {
	vcd_write_val(sim_hdl, num, DEF_test_folded_i_EQ_8___d111, 1u);
	backing.DEF_test_folded_i_EQ_8___d111 = DEF_test_folded_i_EQ_8___d111;
      }
      ++num;
      if ((backing.DEF_test_folded_tp__h2367) != DEF_test_folded_tp__h2367)
      {
	vcd_write_val(sim_hdl, num, DEF_test_folded_tp__h2367, 8u);
	backing.DEF_test_folded_tp__h2367 = DEF_test_folded_tp__h2367;
      }
      ++num;
      if ((backing.DEF_v__h2997) != DEF_v__h2997)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h2997, 32u);
	backing.DEF_v__h2997 = DEF_v__h2997;
      }
      ++num;
      if ((backing.DEF_v__h3071) != DEF_v__h3071)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h3071, 8u);
	backing.DEF_v__h3071 = DEF_v__h3071;
      }
      ++num;
      if ((backing.DEF_v__h3374) != DEF_v__h3374)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h3374, 32u);
	backing.DEF_v__h3374 = DEF_v__h3374;
      }
      ++num;
      if ((backing.DEF_v__h3447) != DEF_v__h3447)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h3447, 8u);
	backing.DEF_v__h3447 = DEF_v__h3447;
      }
      ++num;
      if ((backing.DEF_x__h2525) != DEF_x__h2525)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2525, 4u);
	backing.DEF_x__h2525 = DEF_x__h2525;
      }
      ++num;
      if ((backing.DEF_x__h3859) != DEF_x__h3859)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h3859, 32u);
	backing.DEF_x__h3859 = DEF_x__h3859;
      }
      ++num;
      if ((backing.DEF_x__h5648) != DEF_x__h5648)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h5648, 32u);
	backing.DEF_x__h5648 = DEF_x__h5648;
      }
      ++num;
      if ((backing.DEF_x_wget__h2940) != DEF_x_wget__h2940)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h2940, 8u);
	backing.DEF_x_wget__h2940 = DEF_x_wget__h2940;
      }
      ++num;
      if ((backing.DEF_x_wget__h3317) != DEF_x_wget__h3317)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h3317, 8u);
	backing.DEF_x_wget__h3317 = DEF_x_wget__h3317;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_feed, 1u);
      backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_read, 1u);
      backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_test_folded_mulStep, 1u);
      backing.DEF_CAN_FIRE_RL_test_folded_mulStep = DEF_CAN_FIRE_RL_test_folded_mulStep;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d89, 1u);
      backing.DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d89 = DEF_IF_tb_randomA_zaz_whas__9_THEN_tb_randomA_zaz__ETC___d89;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomB_zaz_whas__6_THEN_tb_randomB_zaz__ETC___d90, 1u);
      backing.DEF_IF_tb_randomB_zaz_whas__6_THEN_tb_randomB_zaz__ETC___d90 = DEF_IF_tb_randomB_zaz_whas__6_THEN_tb_randomB_zaz__ETC___d90;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_feed, 1u);
      backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_read, 1u);
      backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_test_folded_mulStep, 1u);
      backing.DEF_WILL_FIRE_RL_test_folded_mulStep = DEF_WILL_FIRE_RL_test_folded_mulStep;
      vcd_write_val(sim_hdl, num++, DEF__read__h162, 4u);
      backing.DEF__read__h162 = DEF__read__h162;
      vcd_write_val(sim_hdl, num++, DEF__read__h97, 8u);
      backing.DEF__read__h97 = DEF__read__h97;
      vcd_write_val(sim_hdl, num++, DEF_tb_read_count_08_EQ_128___d109, 1u);
      backing.DEF_tb_read_count_08_EQ_128___d109 = DEF_tb_read_count_08_EQ_128___d109;
      vcd_write_val(sim_hdl, num++, DEF_test_folded_i_EQ_8___d111, 1u);
      backing.DEF_test_folded_i_EQ_8___d111 = DEF_test_folded_i_EQ_8___d111;
      vcd_write_val(sim_hdl, num++, DEF_test_folded_tp__h2367, 8u);
      backing.DEF_test_folded_tp__h2367 = DEF_test_folded_tp__h2367;
      vcd_write_val(sim_hdl, num++, DEF_v__h2997, 32u);
      backing.DEF_v__h2997 = DEF_v__h2997;
      vcd_write_val(sim_hdl, num++, DEF_v__h3071, 8u);
      backing.DEF_v__h3071 = DEF_v__h3071;
      vcd_write_val(sim_hdl, num++, DEF_v__h3374, 32u);
      backing.DEF_v__h3374 = DEF_v__h3374;
      vcd_write_val(sim_hdl, num++, DEF_v__h3447, 8u);
      backing.DEF_v__h3447 = DEF_v__h3447;
      vcd_write_val(sim_hdl, num++, DEF_x__h2525, 4u);
      backing.DEF_x__h2525 = DEF_x__h2525;
      vcd_write_val(sim_hdl, num++, DEF_x__h3859, 32u);
      backing.DEF_x__h3859 = DEF_x__h3859;
      vcd_write_val(sim_hdl, num++, DEF_x__h5648, 32u);
      backing.DEF_x__h5648 = DEF_x__h5648;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h2940, 8u);
      backing.DEF_x_wget__h2940 = DEF_x_wget__h2940;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h3317, 8u);
      backing.DEF_x_wget__h3317 = DEF_x_wget__h3317;
    }
}

void MOD_mkTbEx5::vcd_prims(tVCDDumpType dt, MOD_mkTbEx5 &backing)
{
  INST_tb_cycle.dump_VCD(dt, backing.INST_tb_cycle);
  INST_tb_feed_count.dump_VCD(dt, backing.INST_tb_feed_count);
  INST_tb_operands_fifo.dump_VCD(dt, backing.INST_tb_operands_fifo);
  INST_tb_randomA_ignore.dump_VCD(dt, backing.INST_tb_randomA_ignore);
  INST_tb_randomA_initialized.dump_VCD(dt, backing.INST_tb_randomA_initialized);
  INST_tb_randomA_zaz.dump_VCD(dt, backing.INST_tb_randomA_zaz);
  INST_tb_randomB_ignore.dump_VCD(dt, backing.INST_tb_randomB_ignore);
  INST_tb_randomB_initialized.dump_VCD(dt, backing.INST_tb_randomB_initialized);
  INST_tb_randomB_zaz.dump_VCD(dt, backing.INST_tb_randomB_zaz);
  INST_tb_read_count.dump_VCD(dt, backing.INST_tb_read_count);
  INST_test_folded_a.dump_VCD(dt, backing.INST_test_folded_a);
  INST_test_folded_b.dump_VCD(dt, backing.INST_test_folded_b);
  INST_test_folded_i.dump_VCD(dt, backing.INST_test_folded_i);
  INST_test_folded_prod.dump_VCD(dt, backing.INST_test_folded_prod);
  INST_test_folded_tp.dump_VCD(dt, backing.INST_test_folded_tp);
}
