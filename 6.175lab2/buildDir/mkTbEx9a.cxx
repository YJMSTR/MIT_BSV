/*
 * Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
 * 
 * On Thu Aug  1 13:44:46 CST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkTbEx9a.h"
#include "imported_BDPI_functions.h"


/* String declarations */
static std::string const __str_literal_2("    if signed: %0d * %0d DUT gave %0d", 37u);
static std::string const __str_literal_5("    if signed: %0d * %0d DUT gave %0d instead of %0d",
					 52u);
static std::string const __str_literal_3("    if unsigned: %0d * %0d DUT gave %0d", 39u);
static std::string const __str_literal_6("    if unsigned: %0d * %0d DUT gave %0d instead of %0d",
					 54u);
static std::string const __str_literal_4("FAILED case %0d", 15u);
static std::string const __str_literal_8("FAILED due to cycle limit", 25u);
static std::string const __str_literal_7("PASSED %0d test cases in %0d cycles", 35u);
static std::string const __str_literal_1("PASSED case %0d", 15u);


/* Constructor */
MOD_mkTbEx9a::MOD_mkTbEx9a(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_tb_cycle(simHdl, "tb_cycle", this, 32u, 0u, (tUInt8)0u),
    INST_tb_feed_count(simHdl, "tb_feed_count", this, 32u, 0u, (tUInt8)0u),
    INST_tb_operands_fifo(simHdl, "tb_operands_fifo", this, 8u, 4u, (tUInt8)1u, 0u),
    INST_tb_randomA_ignore(simHdl, "tb_randomA_ignore", this, 4u, (tUInt8)0u),
    INST_tb_randomA_initialized(simHdl, "tb_randomA_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomA_zaz(simHdl, "tb_randomA_zaz", this, 4u, (tUInt8)0u),
    INST_tb_randomB_ignore(simHdl, "tb_randomB_ignore", this, 4u, (tUInt8)0u),
    INST_tb_randomB_initialized(simHdl, "tb_randomB_initialized", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_tb_randomB_zaz(simHdl, "tb_randomB_zaz", this, 4u, (tUInt8)0u),
    INST_tb_read_count(simHdl, "tb_read_count", this, 32u, 0u, (tUInt8)0u),
    INST_test_folded_i(simHdl, "test_folded_i", this, 3u, (tUInt8)3u, (tUInt8)0u),
    INST_test_folded_m_neg(simHdl, "test_folded_m_neg", this, 10u),
    INST_test_folded_m_pos(simHdl, "test_folded_m_pos", this, 10u),
    INST_test_folded_p(simHdl, "test_folded_p", this, 10u),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h1109(2863311530u),
    DEF_v__h732(2863311530u)
{
  symbol_count = 45u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTbEx9a::init_symbols_0()
{
  init_symbol(&symbols[0u], "_read__h135", SYM_DEF, &DEF__read__h135, 3u);
  init_symbol(&symbols[1u], "CAN_FIRE_RL_tb_feed", SYM_DEF, &DEF_CAN_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[2u],
	      "CAN_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[3u],
	      "CAN_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[4u],
	      "CAN_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[5u],
	      "CAN_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[6u],
	      "CAN_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[7u], "CAN_FIRE_RL_tb_read", SYM_DEF, &DEF_CAN_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[8u],
	      "CAN_FIRE_RL_test_folded_mul_step",
	      SYM_DEF,
	      &DEF_CAN_FIRE_RL_test_folded_mul_step,
	      1u);
  init_symbol(&symbols[9u], "RL_tb_feed", SYM_RULE);
  init_symbol(&symbols[10u], "RL_tb_monitor_test", SYM_RULE);
  init_symbol(&symbols[11u], "RL_tb_randomA_every", SYM_RULE);
  init_symbol(&symbols[12u], "RL_tb_randomA_every_1", SYM_RULE);
  init_symbol(&symbols[13u], "RL_tb_randomB_every", SYM_RULE);
  init_symbol(&symbols[14u], "RL_tb_randomB_every_1", SYM_RULE);
  init_symbol(&symbols[15u], "RL_tb_read", SYM_RULE);
  init_symbol(&symbols[16u], "RL_test_folded_mul_step", SYM_RULE);
  init_symbol(&symbols[17u], "tb_cycle", SYM_MODULE, &INST_tb_cycle);
  init_symbol(&symbols[18u], "tb_feed_count", SYM_MODULE, &INST_tb_feed_count);
  init_symbol(&symbols[19u], "tb_operands_fifo", SYM_MODULE, &INST_tb_operands_fifo);
  init_symbol(&symbols[20u], "tb_randomA_ignore", SYM_MODULE, &INST_tb_randomA_ignore);
  init_symbol(&symbols[21u], "tb_randomA_initialized", SYM_MODULE, &INST_tb_randomA_initialized);
  init_symbol(&symbols[22u], "tb_randomA_zaz", SYM_MODULE, &INST_tb_randomA_zaz);
  init_symbol(&symbols[23u], "tb_randomB_ignore", SYM_MODULE, &INST_tb_randomB_ignore);
  init_symbol(&symbols[24u], "tb_randomB_initialized", SYM_MODULE, &INST_tb_randomB_initialized);
  init_symbol(&symbols[25u], "tb_randomB_zaz", SYM_MODULE, &INST_tb_randomB_zaz);
  init_symbol(&symbols[26u], "tb_read_count", SYM_MODULE, &INST_tb_read_count);
  init_symbol(&symbols[27u], "test_folded_i", SYM_MODULE, &INST_test_folded_i);
  init_symbol(&symbols[28u], "test_folded_m_neg", SYM_MODULE, &INST_test_folded_m_neg);
  init_symbol(&symbols[29u], "test_folded_m_pos", SYM_MODULE, &INST_test_folded_m_pos);
  init_symbol(&symbols[30u], "test_folded_p", SYM_MODULE, &INST_test_folded_p);
  init_symbol(&symbols[31u], "v__h1182", SYM_DEF, &DEF_v__h1182, 4u);
  init_symbol(&symbols[32u], "v__h806", SYM_DEF, &DEF_v__h806, 4u);
  init_symbol(&symbols[33u], "WILL_FIRE_RL_tb_feed", SYM_DEF, &DEF_WILL_FIRE_RL_tb_feed, 1u);
  init_symbol(&symbols[34u],
	      "WILL_FIRE_RL_tb_monitor_test",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_monitor_test,
	      1u);
  init_symbol(&symbols[35u],
	      "WILL_FIRE_RL_tb_randomA_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every,
	      1u);
  init_symbol(&symbols[36u],
	      "WILL_FIRE_RL_tb_randomA_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomA_every_1,
	      1u);
  init_symbol(&symbols[37u],
	      "WILL_FIRE_RL_tb_randomB_every",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every,
	      1u);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_tb_randomB_every_1",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_tb_randomB_every_1,
	      1u);
  init_symbol(&symbols[39u], "WILL_FIRE_RL_tb_read", SYM_DEF, &DEF_WILL_FIRE_RL_tb_read, 1u);
  init_symbol(&symbols[40u],
	      "WILL_FIRE_RL_test_folded_mul_step",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_test_folded_mul_step,
	      1u);
  init_symbol(&symbols[41u], "x__h1701", SYM_DEF, &DEF_x__h1701, 32u);
  init_symbol(&symbols[42u], "x__h2268", SYM_DEF, &DEF_x__h2268, 32u);
  init_symbol(&symbols[43u], "x_wget__h1052", SYM_DEF, &DEF_x_wget__h1052, 4u);
  init_symbol(&symbols[44u], "x_wget__h675", SYM_DEF, &DEF_x_wget__h675, 4u);
}


/* Rule actions */

void MOD_mkTbEx9a::RL_test_folded_mul_step()
{
  tUInt32 DEF_cur_p___1__h240;
  tUInt32 DEF_cur_p___1__h246;
  tUInt32 DEF_cur_p___1__h234;
  tUInt8 DEF_pr__h154;
  tUInt32 DEF_x__h168;
  tUInt32 DEF_cur_p___1__h229;
  tUInt32 DEF_a__h189;
  tUInt32 DEF__read__h44;
  tUInt32 DEF__read__h70;
  DEF__read__h70 = INST_test_folded_m_pos.METH_read();
  DEF__read__h44 = INST_test_folded_m_neg.METH_read();
  DEF__read__h135 = INST_test_folded_i.METH_read();
  DEF_test_folded_p__h1814 = INST_test_folded_p.METH_read();
  DEF_cur_p___1__h229 = 1023u & (DEF_test_folded_p__h1814 + DEF__read__h70);
  DEF_pr__h154 = (tUInt8)((tUInt8)7u & DEF_test_folded_p__h1814);
  DEF_cur_p___1__h234 = 1023u & (DEF_test_folded_p__h1814 + (1023u & ((((tUInt32)(511u & DEF__read__h70)) << 1u) | (tUInt32)((tUInt8)0u))));
  DEF_cur_p___1__h246 = 1023u & (DEF_test_folded_p__h1814 + DEF__read__h44);
  DEF_cur_p___1__h240 = 1023u & (DEF_test_folded_p__h1814 + (1023u & ((((tUInt32)(511u & DEF__read__h44)) << 1u) | (tUInt32)((tUInt8)0u))));
  switch (DEF_pr__h154) {
  case (tUInt8)1u:
  case (tUInt8)2u:
    DEF_a__h189 = DEF_cur_p___1__h229;
    break;
  case (tUInt8)3u:
    DEF_a__h189 = DEF_cur_p___1__h234;
    break;
  case (tUInt8)4u:
    DEF_a__h189 = DEF_cur_p___1__h240;
    break;
  case (tUInt8)5u:
  case (tUInt8)6u:
    DEF_a__h189 = DEF_cur_p___1__h246;
    break;
  default:
    DEF_a__h189 = DEF_test_folded_p__h1814;
  }
  DEF_x__h168 = primShiftRA32(10u, 10u, (tUInt32)(DEF_a__h189), 32u, 2u);
  DEF_x__h259 = (tUInt8)7u & (DEF__read__h135 + (tUInt8)1u);
  INST_test_folded_p.METH_write(DEF_x__h168);
  INST_test_folded_i.METH_write(DEF_x__h259);
}

void MOD_mkTbEx9a::RL_tb_randomA_every()
{
  tUInt8 DEF_new_value__h774;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h732 = rand32();
  DEF_new_value__h774 = (tUInt8)((tUInt8)15u & DEF_v__h732);
  INST_tb_randomA_zaz.METH_wset(DEF_new_value__h774);
}

void MOD_mkTbEx9a::RL_tb_randomA_every_1()
{
  DEF_x_wget__h675 = INST_tb_randomA_zaz.METH_wget();
  DEF_tb_randomA_zaz_whas____d35 = INST_tb_randomA_zaz.METH_whas();
  DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37 = DEF_x_wget__h675;
  DEF_v__h806 = DEF_tb_randomA_zaz_whas____d35 ? DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37 : (tUInt8)0u;
  INST_tb_randomA_ignore.METH_wset(DEF_v__h806);
}

void MOD_mkTbEx9a::RL_tb_randomB_every()
{
  tUInt8 DEF_new_value__h1151;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h1109 = rand32();
  DEF_new_value__h1151 = (tUInt8)((tUInt8)15u & DEF_v__h1109);
  INST_tb_randomB_zaz.METH_wset(DEF_new_value__h1151);
}

void MOD_mkTbEx9a::RL_tb_randomB_every_1()
{
  DEF_x_wget__h1052 = INST_tb_randomB_zaz.METH_wget();
  DEF_v__h1182 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1052 : (tUInt8)0u;
  INST_tb_randomB_ignore.METH_wset(DEF_v__h1182);
}

void MOD_mkTbEx9a::RL_tb_feed()
{
  tUInt8 DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d62;
  tUInt32 DEF_x__h1581;
  tUInt32 DEF_x__h1466;
  tUInt32 DEF_x__h1657;
  tUInt32 DEF_x__h1682;
  tUInt8 DEF_NOT_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_rando_ETC___d61;
  tUInt8 DEF__1__h1628;
  tUInt8 DEF_IF_tb_randomA_zaz_whas__5_THEN_NEG_IF_tb_rando_ETC___d64;
  tUInt8 DEF__1__h1524;
  DEF_x__h1701 = INST_tb_feed_count.METH_read();
  DEF_x_wget__h1052 = INST_tb_randomB_zaz.METH_wget();
  DEF_x_wget__h675 = INST_tb_randomA_zaz.METH_wget();
  DEF_tb_randomA_zaz_whas____d35 = INST_tb_randomA_zaz.METH_whas();
  DEF_v__h1182 = INST_tb_randomB_zaz.METH_whas() ? DEF_x_wget__h1052 : (tUInt8)0u;
  DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37 = DEF_x_wget__h675;
  DEF_IF_tb_randomA_zaz_whas__5_THEN_NEG_IF_tb_rando_ETC___d64 = DEF_tb_randomA_zaz_whas____d35 ? (tUInt8)15u & -DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37 : (tUInt8)0u;
  DEF__1__h1524 = (tUInt8)(DEF_IF_tb_randomA_zaz_whas__5_THEN_NEG_IF_tb_rando_ETC___d64 >> 3u);
  DEF_v__h806 = DEF_tb_randomA_zaz_whas____d35 ? DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37 : (tUInt8)0u;
  DEF__1__h1628 = (tUInt8)(DEF_v__h806 >> 3u);
  DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d46 = DEF_v__h806 == (tUInt8)8u;
  DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47 = DEF_v__h1182 == (tUInt8)8u;
  DEF_NOT_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_rando_ETC___d61 = !DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d46 && !DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47;
  DEF_x__h1682 = DEF_x__h1701 + 1u;
  DEF_x__h1657 = 1023u & (((((tUInt32)((tUInt8)0u)) << 5u) | (((tUInt32)(DEF_v__h1182)) << 1u)) | (tUInt32)((tUInt8)0u));
  DEF_x__h1466 = 1023u & (((((tUInt32)(DEF__1__h1524)) << 9u) | (((tUInt32)(DEF_IF_tb_randomA_zaz_whas__5_THEN_NEG_IF_tb_rando_ETC___d64)) << 5u)) | (tUInt32)((tUInt8)0u));
  DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d62 = (tUInt8)255u & ((DEF_v__h806 << 4u) | DEF_v__h1182);
  DEF_x__h1581 = 1023u & (((((tUInt32)(DEF__1__h1628)) << 9u) | (((tUInt32)(DEF_v__h806)) << 5u)) | (tUInt32)((tUInt8)0u));
  if (DEF_NOT_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_rando_ETC___d61)
    INST_tb_operands_fifo.METH_enq(DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d62);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_rando_ETC___d61)
    INST_test_folded_i.METH_write((tUInt8)0u);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_rando_ETC___d61)
    INST_test_folded_m_neg.METH_write(DEF_x__h1466);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_rando_ETC___d61)
    INST_test_folded_m_pos.METH_write(DEF_x__h1581);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_rando_ETC___d61)
    INST_test_folded_p.METH_write(DEF_x__h1657);
  if (DEF_NOT_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_rando_ETC___d61)
    INST_tb_feed_count.METH_write(DEF_x__h1682);
}

void MOD_mkTbEx9a::RL_tb_read()
{
  tUInt32 DEF_x__h2144;
  tUInt8 DEF_NOT_IF_test_folded_i_EQ_2_5_THEN_test_folded_p_ETC___d91;
  tUInt8 DEF_y_avValue__h1792;
  tUInt8 DEF_tb_operands_fifo_first____d80;
  tUInt8 DEF_b__h1721;
  tUInt8 DEF_signed_tb_operands_fifo_first__0_BITS_3_TO_0_3___d89;
  tUInt8 DEF_a__h1720;
  tUInt8 DEF_signed_tb_operands_fifo_first__0_BITS_7_TO_4_1___d88;
  tUInt8 DEF_v__h1745;
  tUInt8 DEF_signed_IF_test_folded_i_EQ_2_5_THEN_test_fold_ETC___d90;
  tUInt8 DEF_expected__h1819;
  tUInt8 DEF_signed_SEXT_tb_operands_fifo_first__0_BITS_7__ETC___d92;
  tUInt8 DEF_IF_test_folded_i_EQ_2_5_THEN_test_folded_p_BIT_ETC___d87;
  DEF__read__h135 = INST_test_folded_i.METH_read();
  DEF_x__h2268 = INST_tb_read_count.METH_read();
  DEF_test_folded_p__h1814 = INST_test_folded_p.METH_read();
  DEF_tb_operands_fifo_first____d80 = INST_tb_operands_fifo.METH_first();
  DEF_a__h1720 = (tUInt8)(DEF_tb_operands_fifo_first____d80 >> 4u);
  DEF_signed_tb_operands_fifo_first__0_BITS_7_TO_4_1___d88 = DEF_a__h1720;
  DEF_b__h1721 = (tUInt8)((tUInt8)15u & DEF_tb_operands_fifo_first____d80);
  DEF_expected__h1819 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(primSignExt8(8u,
										   4u,
										   (tUInt8)(DEF_a__h1720)))) * ((tUInt32)(primSignExt8(8u,
																       4u,
																       (tUInt8)(DEF_b__h1721)))))));
  DEF_signed_SEXT_tb_operands_fifo_first__0_BITS_7__ETC___d92 = DEF_expected__h1819;
  DEF_signed_tb_operands_fifo_first__0_BITS_3_TO_0_3___d89 = DEF_b__h1721;
  DEF_y_avValue__h1792 = (tUInt8)((tUInt8)255u & (DEF_test_folded_p__h1814 >> 1u));
  DEF_test_folded_i_EQ_2___d75 = DEF__read__h135 == (tUInt8)2u;
  DEF_v__h1745 = DEF_test_folded_i_EQ_2___d75 ? DEF_y_avValue__h1792 : (tUInt8)0u;
  DEF_IF_test_folded_i_EQ_2_5_THEN_test_folded_p_BIT_ETC___d87 = DEF_v__h1745 == DEF_expected__h1819;
  DEF_signed_IF_test_folded_i_EQ_2_5_THEN_test_fold_ETC___d90 = DEF_v__h1745;
  DEF_NOT_IF_test_folded_i_EQ_2_5_THEN_test_folded_p_ETC___d91 = !DEF_IF_test_folded_i_EQ_2_5_THEN_test_folded_p_BIT_ETC___d87;
  DEF_x__h2144 = DEF_x__h2268 + 1u;
  DEF_x__h259 = (tUInt8)7u & (DEF__read__h135 + (tUInt8)1u);
  INST_tb_operands_fifo.METH_deq();
  INST_test_folded_i.METH_write(DEF_x__h259);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_IF_test_folded_i_EQ_2_5_THEN_test_folded_p_BIT_ETC___d87)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_1, DEF_x__h2268);
    if (DEF_IF_test_folded_i_EQ_2_5_THEN_test_folded_p_BIT_ETC___d87)
      dollar_display(sim_hdl,
		     this,
		     "s,-4,-4,-8",
		     &__str_literal_2,
		     DEF_signed_tb_operands_fifo_first__0_BITS_7_TO_4_1___d88,
		     DEF_signed_tb_operands_fifo_first__0_BITS_3_TO_0_3___d89,
		     DEF_signed_IF_test_folded_i_EQ_2_5_THEN_test_fold_ETC___d90);
    if (DEF_IF_test_folded_i_EQ_2_5_THEN_test_folded_p_BIT_ETC___d87)
      dollar_display(sim_hdl,
		     this,
		     "s,4,4,8",
		     &__str_literal_3,
		     DEF_a__h1720,
		     DEF_b__h1721,
		     DEF_v__h1745);
    if (DEF_NOT_IF_test_folded_i_EQ_2_5_THEN_test_folded_p_ETC___d91)
      dollar_display(sim_hdl, this, "s,32", &__str_literal_4, DEF_x__h2268);
    if (DEF_NOT_IF_test_folded_i_EQ_2_5_THEN_test_folded_p_ETC___d91)
      dollar_display(sim_hdl,
		     this,
		     "s,-4,-4,-8,-8",
		     &__str_literal_5,
		     DEF_signed_tb_operands_fifo_first__0_BITS_7_TO_4_1___d88,
		     DEF_signed_tb_operands_fifo_first__0_BITS_3_TO_0_3___d89,
		     DEF_signed_IF_test_folded_i_EQ_2_5_THEN_test_fold_ETC___d90,
		     DEF_signed_SEXT_tb_operands_fifo_first__0_BITS_7__ETC___d92);
    if (DEF_NOT_IF_test_folded_i_EQ_2_5_THEN_test_folded_p_ETC___d91)
      dollar_display(sim_hdl,
		     this,
		     "s,4,4,8,8",
		     &__str_literal_6,
		     DEF_a__h1720,
		     DEF_b__h1721,
		     DEF_v__h1745,
		     DEF_expected__h1819);
    if (DEF_NOT_IF_test_folded_i_EQ_2_5_THEN_test_folded_p_ETC___d91)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_read_count.METH_write(DEF_x__h2144);
}

void MOD_mkTbEx9a::RL_tb_monitor_test()
{
  tUInt32 DEF_x__h2497;
  tUInt8 DEF_tb_cycle_4_EQ_0___d95;
  tUInt8 DEF_tb_cycle_4_EQ_16384___d96;
  tUInt32 DEF_x__h2501;
  DEF_x__h2268 = INST_tb_read_count.METH_read();
  DEF_x__h2501 = INST_tb_cycle.METH_read();
  DEF_tb_cycle_4_EQ_16384___d96 = DEF_x__h2501 == 16384u;
  DEF_tb_cycle_4_EQ_0___d95 = DEF_x__h2501 == 0u;
  DEF_tb_read_count_2_EQ_128___d73 = DEF_x__h2268 == 128u;
  DEF_x__h2497 = DEF_x__h2501 + 1u;
  if (DEF_tb_cycle_4_EQ_0___d95)
    INST_tb_randomA_initialized.METH_write((tUInt8)1u);
  if (DEF_tb_cycle_4_EQ_0___d95)
    INST_tb_randomB_initialized.METH_write((tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_tb_read_count_2_EQ_128___d73)
      dollar_display(sim_hdl, this, "s,32,32", &__str_literal_7, DEF_x__h2268, DEF_x__h2501);
    if (DEF_tb_read_count_2_EQ_128___d73)
      dollar_finish(sim_hdl, "32", 1u);
    if (DEF_tb_cycle_4_EQ_16384___d96)
      dollar_display(sim_hdl, this, "s", &__str_literal_8);
    if (DEF_tb_cycle_4_EQ_16384___d96)
      dollar_finish(sim_hdl, "32", 1u);
  }
  INST_tb_cycle.METH_write(DEF_x__h2497);
}


/* Methods */


/* Reset routines */

void MOD_mkTbEx9a::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_test_folded_i.reset_RST(ARG_rst_in);
  INST_tb_read_count.reset_RST(ARG_rst_in);
  INST_tb_randomB_initialized.reset_RST(ARG_rst_in);
  INST_tb_randomA_initialized.reset_RST(ARG_rst_in);
  INST_tb_operands_fifo.reset_RST(ARG_rst_in);
  INST_tb_feed_count.reset_RST(ARG_rst_in);
  INST_tb_cycle.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTbEx9a::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTbEx9a::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_tb_cycle.dump_state(indent + 2u);
  INST_tb_feed_count.dump_state(indent + 2u);
  INST_tb_operands_fifo.dump_state(indent + 2u);
  INST_tb_randomA_ignore.dump_state(indent + 2u);
  INST_tb_randomA_initialized.dump_state(indent + 2u);
  INST_tb_randomA_zaz.dump_state(indent + 2u);
  INST_tb_randomB_ignore.dump_state(indent + 2u);
  INST_tb_randomB_initialized.dump_state(indent + 2u);
  INST_tb_randomB_zaz.dump_state(indent + 2u);
  INST_tb_read_count.dump_state(indent + 2u);
  INST_test_folded_i.dump_state(indent + 2u);
  INST_test_folded_m_neg.dump_state(indent + 2u);
  INST_test_folded_m_pos.dump_state(indent + 2u);
  INST_test_folded_p.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTbEx9a::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 48u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_test_folded_mul_step", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d46", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_feed", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_monitor_test", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomA_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_randomB_every_1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_tb_read", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_test_folded_mul_step", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "_read__h135", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_randomA_zaz_whas____d35", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "tb_read_count_2_EQ_128___d73", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "test_folded_i_EQ_2___d75", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "test_folded_p__h1814", 10u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1109", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h1182", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h732", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h806", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1701", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2268", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h259", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h1052", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x_wget__h675", 4u);
  num = INST_tb_cycle.dump_VCD_defs(num);
  num = INST_tb_feed_count.dump_VCD_defs(num);
  num = INST_tb_operands_fifo.dump_VCD_defs(num);
  num = INST_tb_randomA_ignore.dump_VCD_defs(num);
  num = INST_tb_randomA_initialized.dump_VCD_defs(num);
  num = INST_tb_randomA_zaz.dump_VCD_defs(num);
  num = INST_tb_randomB_ignore.dump_VCD_defs(num);
  num = INST_tb_randomB_initialized.dump_VCD_defs(num);
  num = INST_tb_randomB_zaz.dump_VCD_defs(num);
  num = INST_tb_read_count.dump_VCD_defs(num);
  num = INST_test_folded_i.dump_VCD_defs(num);
  num = INST_test_folded_m_neg.dump_VCD_defs(num);
  num = INST_test_folded_m_pos.dump_VCD_defs(num);
  num = INST_test_folded_p.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTbEx9a::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbEx9a &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTbEx9a::vcd_defs(tVCDDumpType dt, MOD_mkTbEx9a &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 10u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 4u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_tb_feed) != DEF_CAN_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_feed, 1u);
	backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_monitor_test) != DEF_CAN_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every) != DEF_CAN_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomA_every_1) != DEF_CAN_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every) != DEF_CAN_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_randomB_every_1) != DEF_CAN_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_tb_read) != DEF_CAN_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_tb_read, 1u);
	backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_test_folded_mul_step) != DEF_CAN_FIRE_RL_test_folded_mul_step)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_test_folded_mul_step, 1u);
	backing.DEF_CAN_FIRE_RL_test_folded_mul_step = DEF_CAN_FIRE_RL_test_folded_mul_step;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d46) != DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d46)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d46, 1u);
	backing.DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d46 = DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d46;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37) != DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37, 4u);
	backing.DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37 = DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37;
      }
      ++num;
      if ((backing.DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47) != DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47)
      {
	vcd_write_val(sim_hdl, num, DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47, 1u);
	backing.DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47 = DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_feed) != DEF_WILL_FIRE_RL_tb_feed)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_feed, 1u);
	backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_monitor_test) != DEF_WILL_FIRE_RL_tb_monitor_test)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
	backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every) != DEF_WILL_FIRE_RL_tb_randomA_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomA_every_1) != DEF_WILL_FIRE_RL_tb_randomA_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every) != DEF_WILL_FIRE_RL_tb_randomB_every)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_randomB_every_1) != DEF_WILL_FIRE_RL_tb_randomB_every_1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
	backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_tb_read) != DEF_WILL_FIRE_RL_tb_read)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_tb_read, 1u);
	backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_test_folded_mul_step) != DEF_WILL_FIRE_RL_test_folded_mul_step)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_test_folded_mul_step, 1u);
	backing.DEF_WILL_FIRE_RL_test_folded_mul_step = DEF_WILL_FIRE_RL_test_folded_mul_step;
      }
      ++num;
      if ((backing.DEF__read__h135) != DEF__read__h135)
      {
	vcd_write_val(sim_hdl, num, DEF__read__h135, 3u);
	backing.DEF__read__h135 = DEF__read__h135;
      }
      ++num;
      if ((backing.DEF_tb_randomA_zaz_whas____d35) != DEF_tb_randomA_zaz_whas____d35)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_randomA_zaz_whas____d35, 1u);
	backing.DEF_tb_randomA_zaz_whas____d35 = DEF_tb_randomA_zaz_whas____d35;
      }
      ++num;
      if ((backing.DEF_tb_read_count_2_EQ_128___d73) != DEF_tb_read_count_2_EQ_128___d73)
      {
	vcd_write_val(sim_hdl, num, DEF_tb_read_count_2_EQ_128___d73, 1u);
	backing.DEF_tb_read_count_2_EQ_128___d73 = DEF_tb_read_count_2_EQ_128___d73;
      }
      ++num;
      if ((backing.DEF_test_folded_i_EQ_2___d75) != DEF_test_folded_i_EQ_2___d75)
      {
	vcd_write_val(sim_hdl, num, DEF_test_folded_i_EQ_2___d75, 1u);
	backing.DEF_test_folded_i_EQ_2___d75 = DEF_test_folded_i_EQ_2___d75;
      }
      ++num;
      if ((backing.DEF_test_folded_p__h1814) != DEF_test_folded_p__h1814)
      {
	vcd_write_val(sim_hdl, num, DEF_test_folded_p__h1814, 10u);
	backing.DEF_test_folded_p__h1814 = DEF_test_folded_p__h1814;
      }
      ++num;
      if ((backing.DEF_v__h1109) != DEF_v__h1109)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1109, 32u);
	backing.DEF_v__h1109 = DEF_v__h1109;
      }
      ++num;
      if ((backing.DEF_v__h1182) != DEF_v__h1182)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h1182, 4u);
	backing.DEF_v__h1182 = DEF_v__h1182;
      }
      ++num;
      if ((backing.DEF_v__h732) != DEF_v__h732)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h732, 32u);
	backing.DEF_v__h732 = DEF_v__h732;
      }
      ++num;
      if ((backing.DEF_v__h806) != DEF_v__h806)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h806, 4u);
	backing.DEF_v__h806 = DEF_v__h806;
      }
      ++num;
      if ((backing.DEF_x__h1701) != DEF_x__h1701)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1701, 32u);
	backing.DEF_x__h1701 = DEF_x__h1701;
      }
      ++num;
      if ((backing.DEF_x__h2268) != DEF_x__h2268)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2268, 32u);
	backing.DEF_x__h2268 = DEF_x__h2268;
      }
      ++num;
      if ((backing.DEF_x__h259) != DEF_x__h259)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h259, 3u);
	backing.DEF_x__h259 = DEF_x__h259;
      }
      ++num;
      if ((backing.DEF_x_wget__h1052) != DEF_x_wget__h1052)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h1052, 4u);
	backing.DEF_x_wget__h1052 = DEF_x_wget__h1052;
      }
      ++num;
      if ((backing.DEF_x_wget__h675) != DEF_x_wget__h675)
      {
	vcd_write_val(sim_hdl, num, DEF_x_wget__h675, 4u);
	backing.DEF_x_wget__h675 = DEF_x_wget__h675;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_feed, 1u);
      backing.DEF_CAN_FIRE_RL_tb_feed = DEF_CAN_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_CAN_FIRE_RL_tb_monitor_test = DEF_CAN_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every = DEF_CAN_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomA_every_1 = DEF_CAN_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every = DEF_CAN_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_CAN_FIRE_RL_tb_randomB_every_1 = DEF_CAN_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_tb_read, 1u);
      backing.DEF_CAN_FIRE_RL_tb_read = DEF_CAN_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_test_folded_mul_step, 1u);
      backing.DEF_CAN_FIRE_RL_test_folded_mul_step = DEF_CAN_FIRE_RL_test_folded_mul_step;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d46, 1u);
      backing.DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d46 = DEF_IF_tb_randomA_zaz_whas__5_THEN_IF_tb_randomA_z_ETC___d46;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37, 4u);
      backing.DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37 = DEF_IF_tb_randomA_zaz_whas__5_THEN_tb_randomA_zaz__ETC___d37;
      vcd_write_val(sim_hdl, num++, DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47, 1u);
      backing.DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47 = DEF_IF_tb_randomB_zaz_whas__3_THEN_tb_randomB_zaz__ETC___d47;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_feed, 1u);
      backing.DEF_WILL_FIRE_RL_tb_feed = DEF_WILL_FIRE_RL_tb_feed;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_monitor_test, 1u);
      backing.DEF_WILL_FIRE_RL_tb_monitor_test = DEF_WILL_FIRE_RL_tb_monitor_test;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every = DEF_WILL_FIRE_RL_tb_randomA_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomA_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomA_every_1 = DEF_WILL_FIRE_RL_tb_randomA_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every = DEF_WILL_FIRE_RL_tb_randomB_every;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_randomB_every_1, 1u);
      backing.DEF_WILL_FIRE_RL_tb_randomB_every_1 = DEF_WILL_FIRE_RL_tb_randomB_every_1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_tb_read, 1u);
      backing.DEF_WILL_FIRE_RL_tb_read = DEF_WILL_FIRE_RL_tb_read;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_test_folded_mul_step, 1u);
      backing.DEF_WILL_FIRE_RL_test_folded_mul_step = DEF_WILL_FIRE_RL_test_folded_mul_step;
      vcd_write_val(sim_hdl, num++, DEF__read__h135, 3u);
      backing.DEF__read__h135 = DEF__read__h135;
      vcd_write_val(sim_hdl, num++, DEF_tb_randomA_zaz_whas____d35, 1u);
      backing.DEF_tb_randomA_zaz_whas____d35 = DEF_tb_randomA_zaz_whas____d35;
      vcd_write_val(sim_hdl, num++, DEF_tb_read_count_2_EQ_128___d73, 1u);
      backing.DEF_tb_read_count_2_EQ_128___d73 = DEF_tb_read_count_2_EQ_128___d73;
      vcd_write_val(sim_hdl, num++, DEF_test_folded_i_EQ_2___d75, 1u);
      backing.DEF_test_folded_i_EQ_2___d75 = DEF_test_folded_i_EQ_2___d75;
      vcd_write_val(sim_hdl, num++, DEF_test_folded_p__h1814, 10u);
      backing.DEF_test_folded_p__h1814 = DEF_test_folded_p__h1814;
      vcd_write_val(sim_hdl, num++, DEF_v__h1109, 32u);
      backing.DEF_v__h1109 = DEF_v__h1109;
      vcd_write_val(sim_hdl, num++, DEF_v__h1182, 4u);
      backing.DEF_v__h1182 = DEF_v__h1182;
      vcd_write_val(sim_hdl, num++, DEF_v__h732, 32u);
      backing.DEF_v__h732 = DEF_v__h732;
      vcd_write_val(sim_hdl, num++, DEF_v__h806, 4u);
      backing.DEF_v__h806 = DEF_v__h806;
      vcd_write_val(sim_hdl, num++, DEF_x__h1701, 32u);
      backing.DEF_x__h1701 = DEF_x__h1701;
      vcd_write_val(sim_hdl, num++, DEF_x__h2268, 32u);
      backing.DEF_x__h2268 = DEF_x__h2268;
      vcd_write_val(sim_hdl, num++, DEF_x__h259, 3u);
      backing.DEF_x__h259 = DEF_x__h259;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h1052, 4u);
      backing.DEF_x_wget__h1052 = DEF_x_wget__h1052;
      vcd_write_val(sim_hdl, num++, DEF_x_wget__h675, 4u);
      backing.DEF_x_wget__h675 = DEF_x_wget__h675;
    }
}

void MOD_mkTbEx9a::vcd_prims(tVCDDumpType dt, MOD_mkTbEx9a &backing)
{
  INST_tb_cycle.dump_VCD(dt, backing.INST_tb_cycle);
  INST_tb_feed_count.dump_VCD(dt, backing.INST_tb_feed_count);
  INST_tb_operands_fifo.dump_VCD(dt, backing.INST_tb_operands_fifo);
  INST_tb_randomA_ignore.dump_VCD(dt, backing.INST_tb_randomA_ignore);
  INST_tb_randomA_initialized.dump_VCD(dt, backing.INST_tb_randomA_initialized);
  INST_tb_randomA_zaz.dump_VCD(dt, backing.INST_tb_randomA_zaz);
  INST_tb_randomB_ignore.dump_VCD(dt, backing.INST_tb_randomB_ignore);
  INST_tb_randomB_initialized.dump_VCD(dt, backing.INST_tb_randomB_initialized);
  INST_tb_randomB_zaz.dump_VCD(dt, backing.INST_tb_randomB_zaz);
  INST_tb_read_count.dump_VCD(dt, backing.INST_tb_read_count);
  INST_test_folded_i.dump_VCD(dt, backing.INST_test_folded_i);
  INST_test_folded_m_neg.dump_VCD(dt, backing.INST_test_folded_m_neg);
  INST_test_folded_m_pos.dump_VCD(dt, backing.INST_test_folded_m_pos);
  INST_test_folded_p.dump_VCD(dt, backing.INST_test_folded_p);
}
