/*
 * Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
 * 
 * On Sat Aug 24 18:10:57 CST 2024
 * 
 */

/* Generation options: keep-fires */
#ifndef __mkTestDriver_h__
#define __mkTestDriver_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"
#include "mkMultiplier.h"


/* Class declaration for the mkTestDriver module */
class MOD_mkTestDriver : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Reg<tUInt8> INST_m_doneread;
  MOD_Reg<tUInt32> INST_m_in;
  MOD_Reg<tUInt8> INST_m_inited;
  MOD_Reg<tUInt32> INST_m_out;
  MOD_Counter<tUInt32> INST_m_outstanding;
  MOD_Fifo<tUInt32> INST_pipeline_infifo;
  MOD_mkMultiplier INST_pipeline_multiplier_0;
  MOD_mkMultiplier INST_pipeline_multiplier_1;
  MOD_mkMultiplier INST_pipeline_multiplier_2;
  MOD_mkMultiplier INST_pipeline_multiplier_3;
  MOD_mkMultiplier INST_pipeline_multiplier_4;
  MOD_mkMultiplier INST_pipeline_multiplier_5;
  MOD_mkMultiplier INST_pipeline_multiplier_6;
  MOD_mkMultiplier INST_pipeline_multiplier_7;
  MOD_mkMultiplier INST_pipeline_multiplier_8;
  MOD_Fifo<tUInt32> INST_pipeline_outfifo;
  MOD_Reg<tUInt32> INST_pipeline_r_0;
  MOD_Reg<tUInt32> INST_pipeline_r_1;
  MOD_Reg<tUInt32> INST_pipeline_r_2;
  MOD_Reg<tUInt32> INST_pipeline_r_3;
  MOD_Reg<tUInt32> INST_pipeline_r_4;
  MOD_Reg<tUInt32> INST_pipeline_r_5;
  MOD_Reg<tUInt32> INST_pipeline_r_6;
  MOD_Reg<tUInt32> INST_pipeline_r_7;
 
 /* Constructor */
 public:
  MOD_mkTestDriver(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_finish;
  tUInt8 DEF_CAN_FIRE_RL_finish;
  tUInt8 DEF_WILL_FIRE_RL_write;
  tUInt8 DEF_CAN_FIRE_RL_write;
  tUInt8 DEF_WILL_FIRE_RL_read;
  tUInt8 DEF_CAN_FIRE_RL_read;
  tUInt8 DEF_WILL_FIRE_RL_init;
  tUInt8 DEF_CAN_FIRE_RL_init;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_get_multiplier_res;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_get_multiplier_res;
  tUInt8 DEF_WILL_FIRE_RL_pipeline_process;
  tUInt8 DEF_CAN_FIRE_RL_pipeline_process;
 
 /* Local definitions */
 private:
  tUInt32 DEF_b__h6851;
  tUInt32 DEF_x__h7002;
  tUInt32 DEF_TASK_fopen___d70;
  tUInt32 DEF_TASK_fopen___d68;
  tUInt32 DEF_m_out___d95;
 
 /* Rules */
 public:
  void RL_pipeline_process();
  void RL_pipeline_get_multiplier_res();
  void RL_init();
  void RL_read();
  void RL_write();
  void RL_finish();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTestDriver &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTestDriver &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTestDriver &backing);
  void vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTestDriver &backing);
};

#endif /* ifndef __mkTestDriver_h__ */
