/*
 * Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
 * 
 * On Wed Sep  4 01:08:57 CST 2024
 * 
 */
#include "bluesim_primitives.h"
#include "mkPitchAdjustTest.h"


/* String declarations */
static std::string const __str_literal_9("", 0u);
static std::string const __str_literal_11("\n", 1u);
static std::string const __str_literal_8(" ", 1u);
static std::string const __str_literal_10(" >", 2u);
static std::string const __str_literal_6("%d", 2u);
static std::string const __str_literal_5(", ", 2u);
static std::string const __str_literal_3("<", 1u);
static std::string const __str_literal_4("<FP %b.%b>", 10u);
static std::string const __str_literal_2("<V ", 3u);
static std::string const __str_literal_7(">", 1u);
static std::string const __str_literal_14("FAILED", 6u);
static std::string const __str_literal_13("PASSED", 6u);
static std::string const __str_literal_12("got: ", 5u);
static std::string const __str_literal_1("wnt: ", 5u);


/* Constructor */
MOD_mkPitchAdjustTest::MOD_mkPitchAdjustTest(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_adjust_inphases_0(simHdl, "adjust_inphases_0", this, 48u),
    INST_adjust_inphases_1(simHdl, "adjust_inphases_1", this, 48u),
    INST_adjust_inphases_2(simHdl, "adjust_inphases_2", this, 48u),
    INST_adjust_inphases_3(simHdl, "adjust_inphases_3", this, 48u),
    INST_adjust_inphases_4(simHdl, "adjust_inphases_4", this, 48u),
    INST_adjust_inphases_5(simHdl, "adjust_inphases_5", this, 48u),
    INST_adjust_inphases_6(simHdl, "adjust_inphases_6", this, 48u),
    INST_adjust_inphases_7(simHdl, "adjust_inphases_7", this, 48u),
    INST_adjust_outphases_0(simHdl, "adjust_outphases_0", this, 48u, 0llu, (tUInt8)0u),
    INST_adjust_outphases_1(simHdl, "adjust_outphases_1", this, 48u, 0llu, (tUInt8)0u),
    INST_adjust_outphases_2(simHdl, "adjust_outphases_2", this, 48u, 0llu, (tUInt8)0u),
    INST_adjust_outphases_3(simHdl, "adjust_outphases_3", this, 48u, 0llu, (tUInt8)0u),
    INST_adjust_outphases_4(simHdl, "adjust_outphases_4", this, 48u, 0llu, (tUInt8)0u),
    INST_adjust_outphases_5(simHdl, "adjust_outphases_5", this, 48u, 0llu, (tUInt8)0u),
    INST_adjust_outphases_6(simHdl, "adjust_outphases_6", this, 48u, 0llu, (tUInt8)0u),
    INST_adjust_outphases_7(simHdl, "adjust_outphases_7", this, 48u, 0llu, (tUInt8)0u),
    INST_check(simHdl, "check", this, 32u, 0u, (tUInt8)0u),
    INST_feed(simHdl, "feed", this, 32u, 0u, (tUInt8)0u),
    INST_passed(simHdl, "passed", this, 1u, (tUInt8)1u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 42u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkPitchAdjustTest::init_symbols_0()
{
  init_symbol(&symbols[0u], "adjust_inphases_0", SYM_MODULE, &INST_adjust_inphases_0);
  init_symbol(&symbols[1u], "adjust_inphases_1", SYM_MODULE, &INST_adjust_inphases_1);
  init_symbol(&symbols[2u], "adjust_inphases_2", SYM_MODULE, &INST_adjust_inphases_2);
  init_symbol(&symbols[3u], "adjust_inphases_3", SYM_MODULE, &INST_adjust_inphases_3);
  init_symbol(&symbols[4u], "adjust_inphases_4", SYM_MODULE, &INST_adjust_inphases_4);
  init_symbol(&symbols[5u], "adjust_inphases_5", SYM_MODULE, &INST_adjust_inphases_5);
  init_symbol(&symbols[6u], "adjust_inphases_6", SYM_MODULE, &INST_adjust_inphases_6);
  init_symbol(&symbols[7u], "adjust_inphases_7", SYM_MODULE, &INST_adjust_inphases_7);
  init_symbol(&symbols[8u], "adjust_outphases_0", SYM_MODULE, &INST_adjust_outphases_0);
  init_symbol(&symbols[9u], "adjust_outphases_1", SYM_MODULE, &INST_adjust_outphases_1);
  init_symbol(&symbols[10u], "adjust_outphases_2", SYM_MODULE, &INST_adjust_outphases_2);
  init_symbol(&symbols[11u], "adjust_outphases_3", SYM_MODULE, &INST_adjust_outphases_3);
  init_symbol(&symbols[12u], "adjust_outphases_4", SYM_MODULE, &INST_adjust_outphases_4);
  init_symbol(&symbols[13u], "adjust_outphases_5", SYM_MODULE, &INST_adjust_outphases_5);
  init_symbol(&symbols[14u], "adjust_outphases_6", SYM_MODULE, &INST_adjust_outphases_6);
  init_symbol(&symbols[15u], "adjust_outphases_7", SYM_MODULE, &INST_adjust_outphases_7);
  init_symbol(&symbols[16u], "CAN_FIRE_RL_c0", SYM_DEF, &DEF_CAN_FIRE_RL_c0, 1u);
  init_symbol(&symbols[17u], "CAN_FIRE_RL_c1", SYM_DEF, &DEF_CAN_FIRE_RL_c1, 1u);
  init_symbol(&symbols[18u], "CAN_FIRE_RL_c2", SYM_DEF, &DEF_CAN_FIRE_RL_c2, 1u);
  init_symbol(&symbols[19u], "CAN_FIRE_RL_f0", SYM_DEF, &DEF_CAN_FIRE_RL_f0, 1u);
  init_symbol(&symbols[20u], "CAN_FIRE_RL_f1", SYM_DEF, &DEF_CAN_FIRE_RL_f1, 1u);
  init_symbol(&symbols[21u], "CAN_FIRE_RL_f2", SYM_DEF, &DEF_CAN_FIRE_RL_f2, 1u);
  init_symbol(&symbols[22u], "CAN_FIRE_RL_finish", SYM_DEF, &DEF_CAN_FIRE_RL_finish, 1u);
  init_symbol(&symbols[23u], "check", SYM_MODULE, &INST_check);
  init_symbol(&symbols[24u], "feed", SYM_MODULE, &INST_feed);
  init_symbol(&symbols[25u], "passed", SYM_MODULE, &INST_passed);
  init_symbol(&symbols[26u], "RL_c0", SYM_RULE);
  init_symbol(&symbols[27u], "RL_c1", SYM_RULE);
  init_symbol(&symbols[28u], "RL_c2", SYM_RULE);
  init_symbol(&symbols[29u], "RL_f0", SYM_RULE);
  init_symbol(&symbols[30u], "RL_f1", SYM_RULE);
  init_symbol(&symbols[31u], "RL_f2", SYM_RULE);
  init_symbol(&symbols[32u], "RL_finish", SYM_RULE);
  init_symbol(&symbols[33u], "WILL_FIRE_RL_c0", SYM_DEF, &DEF_WILL_FIRE_RL_c0, 1u);
  init_symbol(&symbols[34u], "WILL_FIRE_RL_c1", SYM_DEF, &DEF_WILL_FIRE_RL_c1, 1u);
  init_symbol(&symbols[35u], "WILL_FIRE_RL_c2", SYM_DEF, &DEF_WILL_FIRE_RL_c2, 1u);
  init_symbol(&symbols[36u], "WILL_FIRE_RL_f0", SYM_DEF, &DEF_WILL_FIRE_RL_f0, 1u);
  init_symbol(&symbols[37u], "WILL_FIRE_RL_f1", SYM_DEF, &DEF_WILL_FIRE_RL_f1, 1u);
  init_symbol(&symbols[38u], "WILL_FIRE_RL_f2", SYM_DEF, &DEF_WILL_FIRE_RL_f2, 1u);
  init_symbol(&symbols[39u], "WILL_FIRE_RL_finish", SYM_DEF, &DEF_WILL_FIRE_RL_finish, 1u);
  init_symbol(&symbols[40u], "x__h8839", SYM_DEF, &DEF_x__h8839, 32u);
  init_symbol(&symbols[41u], "x__h8844", SYM_DEF, &DEF_x__h8844, 32u);
}


/* Rule actions */

void MOD_mkPitchAdjustTest::RL_f0()
{
  DEF_x__h8839 = INST_feed.METH_read();
  DEF_x__h1393 = DEF_x__h8839 + 1u;
  INST_feed.METH_write(DEF_x__h1393);
}

void MOD_mkPitchAdjustTest::RL_f1()
{
  DEF_x__h8839 = INST_feed.METH_read();
  DEF_x__h1393 = DEF_x__h8839 + 1u;
  INST_feed.METH_write(DEF_x__h1393);
}

void MOD_mkPitchAdjustTest::RL_f2()
{
  DEF_x__h8839 = INST_feed.METH_read();
  DEF_x__h1393 = DEF_x__h8839 + 1u;
  INST_feed.METH_write(DEF_x__h1393);
}

void MOD_mkPitchAdjustTest::RL_c0()
{
  tUInt32 DEF_signed_32768___d11;
  DEF_unsigned_DONTCARE___d13 = 43690u;
  DEF_unsigned_0___d9 = 0u;
  DEF_signed_DONTCARE___d12 = 43690u;
  DEF_signed_32768___d11 = 32768u;
  DEF_signed_1___d8 = 1u;
  DEF_x__h8844 = INST_check.METH_read();
  DEF_signed_0___d10 = 0u;
  DEF_x__h4059 = DEF_x__h8844 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl, this, "s", &__str_literal_1);
    dollar_write(sim_hdl, this, "s", &__str_literal_2);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_1___d8, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_1___d8, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_32768___d11, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_1___d8, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_1___d8, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_32768___d11, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_9);
    dollar_write(sim_hdl, this, "s", &__str_literal_10);
    dollar_write(sim_hdl, this, "s", &__str_literal_11);
    dollar_write(sim_hdl, this, "s", &__str_literal_12);
    dollar_write(sim_hdl, this, "s", &__str_literal_2);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_9);
    dollar_write(sim_hdl, this, "s", &__str_literal_10);
    dollar_write(sim_hdl, this, "s", &__str_literal_11);
  }
  INST_passed.METH_write((tUInt8)0u);
  INST_check.METH_write(DEF_x__h4059);
}

void MOD_mkPitchAdjustTest::RL_c1()
{
  DEF_unsigned_DONTCARE___d13 = 43690u;
  DEF_unsigned_0___d9 = 0u;
  DEF_signed_DONTCARE___d12 = 43690u;
  DEF_signed_1___d8 = 1u;
  DEF_signed_0___d10 = 0u;
  DEF_x__h8844 = INST_check.METH_read();
  DEF_x__h4059 = DEF_x__h8844 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl, this, "s", &__str_literal_1);
    dollar_write(sim_hdl, this, "s", &__str_literal_2);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_1___d8, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_1___d8, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_1___d8, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_1___d8, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_9);
    dollar_write(sim_hdl, this, "s", &__str_literal_10);
    dollar_write(sim_hdl, this, "s", &__str_literal_11);
    dollar_write(sim_hdl, this, "s", &__str_literal_12);
    dollar_write(sim_hdl, this, "s", &__str_literal_2);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_9);
    dollar_write(sim_hdl, this, "s", &__str_literal_10);
    dollar_write(sim_hdl, this, "s", &__str_literal_11);
  }
  INST_passed.METH_write((tUInt8)0u);
  INST_check.METH_write(DEF_x__h4059);
}

void MOD_mkPitchAdjustTest::RL_c2()
{
  tUInt32 DEF_signed_6___d17;
  tUInt32 DEF_signed_9___d20;
  tUInt32 DEF_signed_14___d23;
  tUInt32 DEF_signed_16384___d22;
  tUInt32 DEF_signed_39880___d25;
  tUInt32 DEF_signed_51230___d19;
  tUInt32 DEF_unsigned_25930___d18;
  tUInt32 DEF_unsigned_52551___d24;
  tUInt32 DEF_unsigned_58949___d21;
  DEF_unsigned_DONTCARE___d13 = 43690u;
  DEF_unsigned_58949___d21 = 58949u;
  DEF_unsigned_52551___d24 = 52551u;
  DEF_unsigned_25930___d18 = 25930u;
  DEF_unsigned_0___d9 = 0u;
  DEF_signed_51230___d19 = 51230u;
  DEF_signed_DONTCARE___d12 = 43690u;
  DEF_signed_39880___d25 = 39880u;
  DEF_signed_16384___d22 = 16384u;
  DEF_signed_14___d23 = 14u;
  DEF_signed_9___d20 = 9u;
  DEF_signed_6___d17 = 6u;
  DEF_x__h8844 = INST_check.METH_read();
  DEF_signed_0___d10 = 0u;
  DEF_x__h4059 = DEF_x__h8844 + 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl, this, "s", &__str_literal_1);
    dollar_write(sim_hdl, this, "s", &__str_literal_2);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_6___d17,
		 DEF_unsigned_25930___d18);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_51230___d19, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_9___d20,
		 DEF_unsigned_58949___d21);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_16384___d22, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_14___d23,
		 DEF_unsigned_52551___d24);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_39880___d25, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl, this, "s,-16,16", &__str_literal_4, DEF_signed_0___d10, DEF_unsigned_0___d9);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl, this, "s,-16,s", &__str_literal_6, DEF_signed_0___d10, &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_9);
    dollar_write(sim_hdl, this, "s", &__str_literal_10);
    dollar_write(sim_hdl, this, "s", &__str_literal_11);
    dollar_write(sim_hdl, this, "s", &__str_literal_12);
    dollar_write(sim_hdl, this, "s", &__str_literal_2);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_3);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,16",
		 &__str_literal_4,
		 DEF_signed_DONTCARE___d12,
		 DEF_unsigned_DONTCARE___d13);
    dollar_write(sim_hdl, this, "s", &__str_literal_5);
    dollar_write(sim_hdl,
		 this,
		 "s,-16,s",
		 &__str_literal_6,
		 DEF_signed_DONTCARE___d12,
		 &__str_literal_7);
    dollar_write(sim_hdl, this, "s", &__str_literal_8);
    dollar_write(sim_hdl, this, "s", &__str_literal_9);
    dollar_write(sim_hdl, this, "s", &__str_literal_10);
    dollar_write(sim_hdl, this, "s", &__str_literal_11);
  }
  INST_passed.METH_write((tUInt8)0u);
  INST_check.METH_write(DEF_x__h4059);
}

void MOD_mkPitchAdjustTest::RL_finish()
{
  tUInt8 DEF_NOT_passed_9___d30;
  tUInt8 DEF_passed__h8861;
  DEF_passed__h8861 = INST_passed.METH_read();
  DEF_NOT_passed_9___d30 = !DEF_passed__h8861;
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    if (DEF_passed__h8861)
      dollar_display(sim_hdl, this, "s", &__str_literal_13);
    if (DEF_NOT_passed_9___d30)
      dollar_display(sim_hdl, this, "s", &__str_literal_14);
    dollar_finish(sim_hdl, "32", 1u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkPitchAdjustTest::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_passed.reset_RST(ARG_rst_in);
  INST_feed.reset_RST(ARG_rst_in);
  INST_check.reset_RST(ARG_rst_in);
  INST_adjust_outphases_7.reset_RST(ARG_rst_in);
  INST_adjust_outphases_6.reset_RST(ARG_rst_in);
  INST_adjust_outphases_5.reset_RST(ARG_rst_in);
  INST_adjust_outphases_4.reset_RST(ARG_rst_in);
  INST_adjust_outphases_3.reset_RST(ARG_rst_in);
  INST_adjust_outphases_2.reset_RST(ARG_rst_in);
  INST_adjust_outphases_1.reset_RST(ARG_rst_in);
  INST_adjust_outphases_0.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkPitchAdjustTest::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkPitchAdjustTest::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_adjust_inphases_0.dump_state(indent + 2u);
  INST_adjust_inphases_1.dump_state(indent + 2u);
  INST_adjust_inphases_2.dump_state(indent + 2u);
  INST_adjust_inphases_3.dump_state(indent + 2u);
  INST_adjust_inphases_4.dump_state(indent + 2u);
  INST_adjust_inphases_5.dump_state(indent + 2u);
  INST_adjust_inphases_6.dump_state(indent + 2u);
  INST_adjust_inphases_7.dump_state(indent + 2u);
  INST_adjust_outphases_0.dump_state(indent + 2u);
  INST_adjust_outphases_1.dump_state(indent + 2u);
  INST_adjust_outphases_2.dump_state(indent + 2u);
  INST_adjust_outphases_3.dump_state(indent + 2u);
  INST_adjust_outphases_4.dump_state(indent + 2u);
  INST_adjust_outphases_5.dump_state(indent + 2u);
  INST_adjust_outphases_6.dump_state(indent + 2u);
  INST_adjust_outphases_7.dump_state(indent + 2u);
  INST_check.dump_state(indent + 2u);
  INST_feed.dump_state(indent + 2u);
  INST_passed.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkPitchAdjustTest::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 43u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_c0", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_c1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_c2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_f0", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_f1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_f2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "CAN_FIRE_RL_finish", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_c0", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_c1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_c2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_f0", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_f1", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_f2", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_finish", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_0___d10", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_1___d8", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "signed_DONTCARE___d12", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "unsigned_0___d9", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "unsigned_DONTCARE___d13", 16u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1393", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h4059", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h8839", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h8844", 32u);
  num = INST_adjust_inphases_0.dump_VCD_defs(num);
  num = INST_adjust_inphases_1.dump_VCD_defs(num);
  num = INST_adjust_inphases_2.dump_VCD_defs(num);
  num = INST_adjust_inphases_3.dump_VCD_defs(num);
  num = INST_adjust_inphases_4.dump_VCD_defs(num);
  num = INST_adjust_inphases_5.dump_VCD_defs(num);
  num = INST_adjust_inphases_6.dump_VCD_defs(num);
  num = INST_adjust_inphases_7.dump_VCD_defs(num);
  num = INST_adjust_outphases_0.dump_VCD_defs(num);
  num = INST_adjust_outphases_1.dump_VCD_defs(num);
  num = INST_adjust_outphases_2.dump_VCD_defs(num);
  num = INST_adjust_outphases_3.dump_VCD_defs(num);
  num = INST_adjust_outphases_4.dump_VCD_defs(num);
  num = INST_adjust_outphases_5.dump_VCD_defs(num);
  num = INST_adjust_outphases_6.dump_VCD_defs(num);
  num = INST_adjust_outphases_7.dump_VCD_defs(num);
  num = INST_check.dump_VCD_defs(num);
  num = INST_feed.dump_VCD_defs(num);
  num = INST_passed.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkPitchAdjustTest::dump_VCD(tVCDDumpType dt,
				     unsigned int levels,
				     MOD_mkPitchAdjustTest &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkPitchAdjustTest::vcd_defs(tVCDDumpType dt, MOD_mkPitchAdjustTest &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 16u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.DEF_CAN_FIRE_RL_c0) != DEF_CAN_FIRE_RL_c0)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_c0, 1u);
	backing.DEF_CAN_FIRE_RL_c0 = DEF_CAN_FIRE_RL_c0;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_c1) != DEF_CAN_FIRE_RL_c1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_c1, 1u);
	backing.DEF_CAN_FIRE_RL_c1 = DEF_CAN_FIRE_RL_c1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_c2) != DEF_CAN_FIRE_RL_c2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_c2, 1u);
	backing.DEF_CAN_FIRE_RL_c2 = DEF_CAN_FIRE_RL_c2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_f0) != DEF_CAN_FIRE_RL_f0)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_f0, 1u);
	backing.DEF_CAN_FIRE_RL_f0 = DEF_CAN_FIRE_RL_f0;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_f1) != DEF_CAN_FIRE_RL_f1)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_f1, 1u);
	backing.DEF_CAN_FIRE_RL_f1 = DEF_CAN_FIRE_RL_f1;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_f2) != DEF_CAN_FIRE_RL_f2)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_f2, 1u);
	backing.DEF_CAN_FIRE_RL_f2 = DEF_CAN_FIRE_RL_f2;
      }
      ++num;
      if ((backing.DEF_CAN_FIRE_RL_finish) != DEF_CAN_FIRE_RL_finish)
      {
	vcd_write_val(sim_hdl, num, DEF_CAN_FIRE_RL_finish, 1u);
	backing.DEF_CAN_FIRE_RL_finish = DEF_CAN_FIRE_RL_finish;
      }
      ++num;
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_c0) != DEF_WILL_FIRE_RL_c0)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_c0, 1u);
	backing.DEF_WILL_FIRE_RL_c0 = DEF_WILL_FIRE_RL_c0;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_c1) != DEF_WILL_FIRE_RL_c1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_c1, 1u);
	backing.DEF_WILL_FIRE_RL_c1 = DEF_WILL_FIRE_RL_c1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_c2) != DEF_WILL_FIRE_RL_c2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_c2, 1u);
	backing.DEF_WILL_FIRE_RL_c2 = DEF_WILL_FIRE_RL_c2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_f0) != DEF_WILL_FIRE_RL_f0)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_f0, 1u);
	backing.DEF_WILL_FIRE_RL_f0 = DEF_WILL_FIRE_RL_f0;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_f1) != DEF_WILL_FIRE_RL_f1)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_f1, 1u);
	backing.DEF_WILL_FIRE_RL_f1 = DEF_WILL_FIRE_RL_f1;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_f2) != DEF_WILL_FIRE_RL_f2)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_f2, 1u);
	backing.DEF_WILL_FIRE_RL_f2 = DEF_WILL_FIRE_RL_f2;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_finish) != DEF_WILL_FIRE_RL_finish)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_finish, 1u);
	backing.DEF_WILL_FIRE_RL_finish = DEF_WILL_FIRE_RL_finish;
      }
      ++num;
      if ((backing.DEF_signed_0___d10) != DEF_signed_0___d10)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_0___d10, 16u);
	backing.DEF_signed_0___d10 = DEF_signed_0___d10;
      }
      ++num;
      if ((backing.DEF_signed_1___d8) != DEF_signed_1___d8)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_1___d8, 16u);
	backing.DEF_signed_1___d8 = DEF_signed_1___d8;
      }
      ++num;
      if ((backing.DEF_signed_DONTCARE___d12) != DEF_signed_DONTCARE___d12)
      {
	vcd_write_val(sim_hdl, num, DEF_signed_DONTCARE___d12, 16u);
	backing.DEF_signed_DONTCARE___d12 = DEF_signed_DONTCARE___d12;
      }
      ++num;
      if ((backing.DEF_unsigned_0___d9) != DEF_unsigned_0___d9)
      {
	vcd_write_val(sim_hdl, num, DEF_unsigned_0___d9, 16u);
	backing.DEF_unsigned_0___d9 = DEF_unsigned_0___d9;
      }
      ++num;
      if ((backing.DEF_unsigned_DONTCARE___d13) != DEF_unsigned_DONTCARE___d13)
      {
	vcd_write_val(sim_hdl, num, DEF_unsigned_DONTCARE___d13, 16u);
	backing.DEF_unsigned_DONTCARE___d13 = DEF_unsigned_DONTCARE___d13;
      }
      ++num;
      if ((backing.DEF_x__h1393) != DEF_x__h1393)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1393, 32u);
	backing.DEF_x__h1393 = DEF_x__h1393;
      }
      ++num;
      if ((backing.DEF_x__h4059) != DEF_x__h4059)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h4059, 32u);
	backing.DEF_x__h4059 = DEF_x__h4059;
      }
      ++num;
      if ((backing.DEF_x__h8839) != DEF_x__h8839)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h8839, 32u);
	backing.DEF_x__h8839 = DEF_x__h8839;
      }
      ++num;
      if ((backing.DEF_x__h8844) != DEF_x__h8844)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h8844, 32u);
	backing.DEF_x__h8844 = DEF_x__h8844;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_c0, 1u);
      backing.DEF_CAN_FIRE_RL_c0 = DEF_CAN_FIRE_RL_c0;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_c1, 1u);
      backing.DEF_CAN_FIRE_RL_c1 = DEF_CAN_FIRE_RL_c1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_c2, 1u);
      backing.DEF_CAN_FIRE_RL_c2 = DEF_CAN_FIRE_RL_c2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_f0, 1u);
      backing.DEF_CAN_FIRE_RL_f0 = DEF_CAN_FIRE_RL_f0;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_f1, 1u);
      backing.DEF_CAN_FIRE_RL_f1 = DEF_CAN_FIRE_RL_f1;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_f2, 1u);
      backing.DEF_CAN_FIRE_RL_f2 = DEF_CAN_FIRE_RL_f2;
      vcd_write_val(sim_hdl, num++, DEF_CAN_FIRE_RL_finish, 1u);
      backing.DEF_CAN_FIRE_RL_finish = DEF_CAN_FIRE_RL_finish;
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_c0, 1u);
      backing.DEF_WILL_FIRE_RL_c0 = DEF_WILL_FIRE_RL_c0;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_c1, 1u);
      backing.DEF_WILL_FIRE_RL_c1 = DEF_WILL_FIRE_RL_c1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_c2, 1u);
      backing.DEF_WILL_FIRE_RL_c2 = DEF_WILL_FIRE_RL_c2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_f0, 1u);
      backing.DEF_WILL_FIRE_RL_f0 = DEF_WILL_FIRE_RL_f0;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_f1, 1u);
      backing.DEF_WILL_FIRE_RL_f1 = DEF_WILL_FIRE_RL_f1;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_f2, 1u);
      backing.DEF_WILL_FIRE_RL_f2 = DEF_WILL_FIRE_RL_f2;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_finish, 1u);
      backing.DEF_WILL_FIRE_RL_finish = DEF_WILL_FIRE_RL_finish;
      vcd_write_val(sim_hdl, num++, DEF_signed_0___d10, 16u);
      backing.DEF_signed_0___d10 = DEF_signed_0___d10;
      vcd_write_val(sim_hdl, num++, DEF_signed_1___d8, 16u);
      backing.DEF_signed_1___d8 = DEF_signed_1___d8;
      vcd_write_val(sim_hdl, num++, DEF_signed_DONTCARE___d12, 16u);
      backing.DEF_signed_DONTCARE___d12 = DEF_signed_DONTCARE___d12;
      vcd_write_val(sim_hdl, num++, DEF_unsigned_0___d9, 16u);
      backing.DEF_unsigned_0___d9 = DEF_unsigned_0___d9;
      vcd_write_val(sim_hdl, num++, DEF_unsigned_DONTCARE___d13, 16u);
      backing.DEF_unsigned_DONTCARE___d13 = DEF_unsigned_DONTCARE___d13;
      vcd_write_val(sim_hdl, num++, DEF_x__h1393, 32u);
      backing.DEF_x__h1393 = DEF_x__h1393;
      vcd_write_val(sim_hdl, num++, DEF_x__h4059, 32u);
      backing.DEF_x__h4059 = DEF_x__h4059;
      vcd_write_val(sim_hdl, num++, DEF_x__h8839, 32u);
      backing.DEF_x__h8839 = DEF_x__h8839;
      vcd_write_val(sim_hdl, num++, DEF_x__h8844, 32u);
      backing.DEF_x__h8844 = DEF_x__h8844;
    }
}

void MOD_mkPitchAdjustTest::vcd_prims(tVCDDumpType dt, MOD_mkPitchAdjustTest &backing)
{
  INST_adjust_inphases_0.dump_VCD(dt, backing.INST_adjust_inphases_0);
  INST_adjust_inphases_1.dump_VCD(dt, backing.INST_adjust_inphases_1);
  INST_adjust_inphases_2.dump_VCD(dt, backing.INST_adjust_inphases_2);
  INST_adjust_inphases_3.dump_VCD(dt, backing.INST_adjust_inphases_3);
  INST_adjust_inphases_4.dump_VCD(dt, backing.INST_adjust_inphases_4);
  INST_adjust_inphases_5.dump_VCD(dt, backing.INST_adjust_inphases_5);
  INST_adjust_inphases_6.dump_VCD(dt, backing.INST_adjust_inphases_6);
  INST_adjust_inphases_7.dump_VCD(dt, backing.INST_adjust_inphases_7);
  INST_adjust_outphases_0.dump_VCD(dt, backing.INST_adjust_outphases_0);
  INST_adjust_outphases_1.dump_VCD(dt, backing.INST_adjust_outphases_1);
  INST_adjust_outphases_2.dump_VCD(dt, backing.INST_adjust_outphases_2);
  INST_adjust_outphases_3.dump_VCD(dt, backing.INST_adjust_outphases_3);
  INST_adjust_outphases_4.dump_VCD(dt, backing.INST_adjust_outphases_4);
  INST_adjust_outphases_5.dump_VCD(dt, backing.INST_adjust_outphases_5);
  INST_adjust_outphases_6.dump_VCD(dt, backing.INST_adjust_outphases_6);
  INST_adjust_outphases_7.dump_VCD(dt, backing.INST_adjust_outphases_7);
  INST_check.dump_VCD(dt, backing.INST_check);
  INST_feed.dump_VCD(dt, backing.INST_feed);
  INST_passed.dump_VCD(dt, backing.INST_passed);
}
