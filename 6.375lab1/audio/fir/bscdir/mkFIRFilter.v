//
// Generated by Bluespec Compiler, version 2024.01 (build ae2a2fc6)
//
// On Sat Aug 17 14:45:00 CST 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_putSampleInput             O     1 reg
// getSampleOutput                O    16 reg
// RDY_getSampleOutput            O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// putSampleInput_in              I    16 reg
// EN_putSampleInput              I     1
// EN_getSampleOutput             I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFIRFilter(CLK,
		   RST_N,

		   putSampleInput_in,
		   EN_putSampleInput,
		   RDY_putSampleInput,

		   EN_getSampleOutput,
		   getSampleOutput,
		   RDY_getSampleOutput);
  input  CLK;
  input  RST_N;

  // action method putSampleInput
  input  [15 : 0] putSampleInput_in;
  input  EN_putSampleInput;
  output RDY_putSampleInput;

  // actionvalue method getSampleOutput
  input  EN_getSampleOutput;
  output [15 : 0] getSampleOutput;
  output RDY_getSampleOutput;

  // signals for module outputs
  wire [15 : 0] getSampleOutput;
  wire RDY_getSampleOutput, RDY_putSampleInput;

  // register r0
  reg [15 : 0] r0;
  wire [15 : 0] r0$D_IN;
  wire r0$EN;

  // register r1
  reg [15 : 0] r1;
  wire [15 : 0] r1$D_IN;
  wire r1$EN;

  // register r2
  reg [15 : 0] r2;
  wire [15 : 0] r2$D_IN;
  wire r2$EN;

  // register r3
  reg [15 : 0] r3;
  wire [15 : 0] r3$D_IN;
  wire r3$EN;

  // register r4
  reg [15 : 0] r4;
  wire [15 : 0] r4$D_IN;
  wire r4$EN;

  // register r5
  reg [15 : 0] r5;
  wire [15 : 0] r5$D_IN;
  wire r5$EN;

  // register r6
  reg [15 : 0] r6;
  wire [15 : 0] r6$D_IN;
  wire r6$EN;

  // register r7
  reg [15 : 0] r7;
  wire [15 : 0] r7$D_IN;
  wire r7$EN;

  // ports of submodule infifo
  wire [15 : 0] infifo$D_IN, infifo$D_OUT;
  wire infifo$CLR, infifo$DEQ, infifo$EMPTY_N, infifo$ENQ, infifo$FULL_N;

  // ports of submodule outfifo
  wire [15 : 0] outfifo$D_IN, outfifo$D_OUT;
  wire outfifo$CLR, outfifo$DEQ, outfifo$EMPTY_N, outfifo$ENQ, outfifo$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_process,
       CAN_FIRE_getSampleOutput,
       CAN_FIRE_putSampleInput,
       WILL_FIRE_RL_process,
       WILL_FIRE_getSampleOutput,
       WILL_FIRE_putSampleInput;

  // remaining internal signals
  wire [63 : 0] IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18,
		IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_15_1_THE_ETC___d57,
		IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_BIT_15_ETC___d97,
		IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0_BIT_15__ETC___d137,
		IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_71_BIT_1_ETC___d178,
		_53615_MUL_IF_r3_BIT_15_1_THEN_NEG_r3_CONCAT_0__ETC___d95,
		_813_MUL_IF_infifo_first_BIT_15_2_THEN_NEG_infi_ETC___d16,
		_813_MUL_IF_r7_71_BIT_15_72_THEN_NEG_r7_71_CONC_ETC___d176,
		_872_MUL_IF_r1_BIT_15_1_THEN_NEG_r1_CONCAT_0_2__ETC___d55,
		_872_MUL_IF_r5_0_BIT_15_31_THEN_NEG_r5_0_CONCAT_ETC___d135;
  wire [47 : 0] IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33,
		IF_NOT_IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_1_ETC___d72,
		IF_NOT_IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_ETC___d112,
		IF_NOT_IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0__ETC___d152,
		IF_NOT_IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_7_ETC___d193,
		IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d30,
		IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_15_1_THE_ETC___d69,
		IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_BIT_15_ETC___d109,
		IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0_BIT_15__ETC___d149,
		IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_71_BIT_1_ETC___d190;
  wire [31 : 0] x__h15184,
		x__h15200,
		x__h21250,
		x__h21266,
		x__h27349,
		x__h27365,
		x__h3153,
		x__h3169,
		x__h809,
		x__h821,
		x__h845,
		x__h869,
		x__h893,
		x__h9158,
		x__h9174;
  wire [15 : 0] y_f__h10211,
		y_f__h16237,
		y_f__h22303,
		y_f__h28402,
		y_f__h4209;

  // action method putSampleInput
  assign RDY_putSampleInput = infifo$FULL_N ;
  assign CAN_FIRE_putSampleInput = infifo$FULL_N ;
  assign WILL_FIRE_putSampleInput = EN_putSampleInput ;

  // actionvalue method getSampleOutput
  assign getSampleOutput = outfifo$D_OUT ;
  assign RDY_getSampleOutput = outfifo$EMPTY_N ;
  assign CAN_FIRE_getSampleOutput = outfifo$EMPTY_N ;
  assign WILL_FIRE_getSampleOutput = EN_getSampleOutput ;

  // submodule infifo
  FIFO2 #(.width(32'd16), .guarded(1'd1)) infifo(.RST(RST_N),
						 .CLK(CLK),
						 .D_IN(infifo$D_IN),
						 .ENQ(infifo$ENQ),
						 .DEQ(infifo$DEQ),
						 .CLR(infifo$CLR),
						 .D_OUT(infifo$D_OUT),
						 .FULL_N(infifo$FULL_N),
						 .EMPTY_N(infifo$EMPTY_N));

  // submodule outfifo
  FIFO2 #(.width(32'd16), .guarded(1'd1)) outfifo(.RST(RST_N),
						  .CLK(CLK),
						  .D_IN(outfifo$D_IN),
						  .ENQ(outfifo$ENQ),
						  .DEQ(outfifo$DEQ),
						  .CLR(outfifo$CLR),
						  .D_OUT(outfifo$D_OUT),
						  .FULL_N(outfifo$FULL_N),
						  .EMPTY_N(outfifo$EMPTY_N));

  // rule RL_process
  assign CAN_FIRE_RL_process = infifo$EMPTY_N && outfifo$FULL_N ;
  assign WILL_FIRE_RL_process = CAN_FIRE_RL_process ;

  // register r0
  assign r0$D_IN = infifo$D_OUT ;
  assign r0$EN = CAN_FIRE_RL_process ;

  // register r1
  assign r1$D_IN = r0 ;
  assign r1$EN = CAN_FIRE_RL_process ;

  // register r2
  assign r2$D_IN = r1 ;
  assign r2$EN = CAN_FIRE_RL_process ;

  // register r3
  assign r3$D_IN = r2 ;
  assign r3$EN = CAN_FIRE_RL_process ;

  // register r4
  assign r4$D_IN = r3 ;
  assign r4$EN = CAN_FIRE_RL_process ;

  // register r5
  assign r5$D_IN = r4 ;
  assign r5$EN = CAN_FIRE_RL_process ;

  // register r6
  assign r6$D_IN = r5 ;
  assign r6$EN = CAN_FIRE_RL_process ;

  // register r7
  assign r7$D_IN = r6 ;
  assign r7$EN = CAN_FIRE_RL_process ;

  // submodule infifo
  assign infifo$D_IN = putSampleInput_in ;
  assign infifo$ENQ = EN_putSampleInput ;
  assign infifo$DEQ = CAN_FIRE_RL_process ;
  assign infifo$CLR = 1'b0 ;

  // submodule outfifo
  assign outfifo$D_IN = x__h809[31:16] ;
  assign outfifo$ENQ = CAN_FIRE_RL_process ;
  assign outfifo$DEQ = EN_getSampleOutput ;
  assign outfifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33 =
	     (!IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18[63] &&
	      IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d30[47]) ?
	       48'h7FFFFFFFFFFF :
	       IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d30 ;
  assign IF_NOT_IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_1_ETC___d72 =
	     (!IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_15_1_THE_ETC___d57[63] &&
	      IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_15_1_THE_ETC___d69[47]) ?
	       48'h7FFFFFFFFFFF :
	       IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_15_1_THE_ETC___d69 ;
  assign IF_NOT_IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_ETC___d112 =
	     (!IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_BIT_15_ETC___d97[63] &&
	      IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_BIT_15_ETC___d109[47]) ?
	       48'h7FFFFFFFFFFF :
	       IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_BIT_15_ETC___d109 ;
  assign IF_NOT_IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0__ETC___d152 =
	     (!IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0_BIT_15__ETC___d137[63] &&
	      IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0_BIT_15__ETC___d149[47]) ?
	       48'h7FFFFFFFFFFF :
	       IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0_BIT_15__ETC___d149 ;
  assign IF_NOT_IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_7_ETC___d193 =
	     (!IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_71_BIT_1_ETC___d178[63] &&
	      IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_71_BIT_1_ETC___d190[47]) ?
	       48'h7FFFFFFFFFFF :
	       IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_71_BIT_1_ETC___d190 ;
  assign IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18 =
	     infifo$D_OUT[15] ?
	       _813_MUL_IF_infifo_first_BIT_15_2_THEN_NEG_infi_ETC___d16 :
	       -_813_MUL_IF_infifo_first_BIT_15_2_THEN_NEG_infi_ETC___d16 ;
  assign IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d30 =
	     IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18[63:16] +
	     { 32'd0, y_f__h4209 } ;
  assign IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_15_1_THE_ETC___d57 =
	     r1[15] ?
	       _872_MUL_IF_r1_BIT_15_1_THEN_NEG_r1_CONCAT_0_2__ETC___d55 :
	       -_872_MUL_IF_r1_BIT_15_1_THEN_NEG_r1_CONCAT_0_2__ETC___d55 ;
  assign IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_15_1_THE_ETC___d69 =
	     IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_15_1_THE_ETC___d57[63:16] +
	     { 32'd0, y_f__h10211 } ;
  assign IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_BIT_15_ETC___d109 =
	     IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_BIT_15_ETC___d97[63:16] +
	     { 32'd0, y_f__h16237 } ;
  assign IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_BIT_15_ETC___d97 =
	     r3[15] ?
	       -_53615_MUL_IF_r3_BIT_15_1_THEN_NEG_r3_CONCAT_0__ETC___d95 :
	       _53615_MUL_IF_r3_BIT_15_1_THEN_NEG_r3_CONCAT_0__ETC___d95 ;
  assign IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0_BIT_15__ETC___d137 =
	     r5[15] ?
	       _872_MUL_IF_r5_0_BIT_15_31_THEN_NEG_r5_0_CONCAT_ETC___d135 :
	       -_872_MUL_IF_r5_0_BIT_15_31_THEN_NEG_r5_0_CONCAT_ETC___d135 ;
  assign IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0_BIT_15__ETC___d149 =
	     IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0_BIT_15__ETC___d137[63:16] +
	     { 32'd0, y_f__h22303 } ;
  assign IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_71_BIT_1_ETC___d178 =
	     r7[15] ?
	       _813_MUL_IF_r7_71_BIT_15_72_THEN_NEG_r7_71_CONC_ETC___d176 :
	       -_813_MUL_IF_r7_71_BIT_15_72_THEN_NEG_r7_71_CONC_ETC___d176 ;
  assign IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_71_BIT_1_ETC___d190 =
	     IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_71_BIT_1_ETC___d178[63:16] +
	     { 32'd0, y_f__h28402 } ;
  assign _53615_MUL_IF_r3_BIT_15_1_THEN_NEG_r3_CONCAT_0__ETC___d95 =
	     32'd53615 * x__h15184 ;
  assign _813_MUL_IF_infifo_first_BIT_15_2_THEN_NEG_infi_ETC___d16 =
	     32'd813 * x__h3153 ;
  assign _813_MUL_IF_r7_71_BIT_15_72_THEN_NEG_r7_71_CONC_ETC___d176 =
	     32'd813 * x__h27349 ;
  assign _872_MUL_IF_r1_BIT_15_1_THEN_NEG_r1_CONCAT_0_2__ETC___d55 =
	     32'd872 * x__h9158 ;
  assign _872_MUL_IF_r5_0_BIT_15_31_THEN_NEG_r5_0_CONCAT_ETC___d135 =
	     32'd872 * x__h21250 ;
  assign x__h15184 = r3[15] ? -x__h15200 : x__h15200 ;
  assign x__h15200 = { r3, 16'd0 } ;
  assign x__h21250 = r5[15] ? -x__h21266 : x__h21266 ;
  assign x__h21266 = { r5, 16'd0 } ;
  assign x__h27349 = r7[15] ? -x__h27365 : x__h27365 ;
  assign x__h27365 = { r7, 16'd0 } ;
  assign x__h3153 = infifo$D_OUT[15] ? -x__h3169 : x__h3169 ;
  assign x__h3169 = { infifo$D_OUT, 16'd0 } ;
  assign x__h809 =
	     x__h821 +
	     ((!IF_NOT_IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_7_ETC___d193[47] &&
	       (IF_NOT_IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_7_ETC___d193[31] ||
		IF_NOT_IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_7_ETC___d193[47:32] !=
		16'd0)) ?
		32'h7FFFFFFF :
		((IF_NOT_IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_7_ETC___d193[47] &&
		  (!IF_NOT_IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_7_ETC___d193[31] ||
		   ~IF_NOT_IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_7_ETC___d193[47:32] !=
		   16'd0)) ?
		   32'h80000000 :
		   IF_NOT_IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_7_ETC___d193[31:0])) ;
  assign x__h821 =
	     x__h845 +
	     ((!IF_NOT_IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0__ETC___d152[47] &&
	       (IF_NOT_IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0__ETC___d152[31] ||
		IF_NOT_IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0__ETC___d152[47:32] !=
		16'd0)) ?
		32'h7FFFFFFF :
		((IF_NOT_IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0__ETC___d152[47] &&
		  (!IF_NOT_IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0__ETC___d152[31] ||
		   ~IF_NOT_IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0__ETC___d152[47:32] !=
		   16'd0)) ?
		   32'h80000000 :
		   IF_NOT_IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0__ETC___d152[31:0])) ;
  assign x__h845 =
	     x__h869 +
	     ((!IF_NOT_IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_ETC___d112[47] &&
	       (IF_NOT_IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_ETC___d112[31] ||
		IF_NOT_IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_ETC___d112[47:32] !=
		16'd0)) ?
		32'h7FFFFFFF :
		((IF_NOT_IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_ETC___d112[47] &&
		  (!IF_NOT_IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_ETC___d112[31] ||
		   ~IF_NOT_IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_ETC___d112[47:32] !=
		   16'd0)) ?
		   32'h80000000 :
		   IF_NOT_IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_ETC___d112[31:0])) ;
  assign x__h869 =
	     x__h893 +
	     ((!IF_NOT_IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_1_ETC___d72[47] &&
	       (IF_NOT_IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_1_ETC___d72[31] ||
		IF_NOT_IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_1_ETC___d72[47:32] !=
		16'd0)) ?
		32'h7FFFFFFF :
		((IF_NOT_IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_1_ETC___d72[47] &&
		  (!IF_NOT_IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_1_ETC___d72[31] ||
		   ~IF_NOT_IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_1_ETC___d72[47:32] !=
		   16'd0)) ?
		   32'h80000000 :
		   IF_NOT_IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_1_ETC___d72[31:0])) ;
  assign x__h893 =
	     (!IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[47] &&
	      (IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[31] ||
	       IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[47:32] !=
	       16'd0)) ?
	       32'h7FFFFFFF :
	       ((IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[47] &&
		 (!IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[31] ||
		  ~IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[47:32] !=
		  16'd0)) ?
		  32'h80000000 :
		  IF_NOT_IF_infifo_first_BIT_15_2_THEN_813_MUL_I_ETC___d33[31:0]) ;
  assign x__h9158 = r1[15] ? -x__h9174 : x__h9174 ;
  assign x__h9174 = { r1, 16'd0 } ;
  assign y_f__h10211 =
	     (IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_15_1_THE_ETC___d57[15] &&
	      (IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_15_1_THE_ETC___d57[63] ||
	       IF_r1_BIT_15_1_THEN_872_MUL_IF_r1_BIT_15_1_THE_ETC___d57[14:0] !=
	       15'd0)) ?
	       16'd1 :
	       16'd0 ;
  assign y_f__h16237 =
	     (IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_BIT_15_ETC___d97[15] &&
	      (IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_BIT_15_ETC___d97[63] ||
	       IF_r3_BIT_15_1_THEN_NEG_53615_MUL_IF_r3_BIT_15_ETC___d97[14:0] !=
	       15'd0)) ?
	       16'd1 :
	       16'd0 ;
  assign y_f__h22303 =
	     (IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0_BIT_15__ETC___d137[15] &&
	      (IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0_BIT_15__ETC___d137[63] ||
	       IF_r5_0_BIT_15_31_THEN_872_MUL_IF_r5_0_BIT_15__ETC___d137[14:0] !=
	       15'd0)) ?
	       16'd1 :
	       16'd0 ;
  assign y_f__h28402 =
	     (IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_71_BIT_1_ETC___d178[15] &&
	      (IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_71_BIT_1_ETC___d178[63] ||
	       IF_r7_71_BIT_15_72_THEN_813_MUL_IF_r7_71_BIT_1_ETC___d178[14:0] !=
	       15'd0)) ?
	       16'd1 :
	       16'd0 ;
  assign y_f__h4209 =
	     (IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18[15] &&
	      (IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18[63] ||
	       IF_infifo_first_BIT_15_2_THEN_813_MUL_IF_infif_ETC___d18[14:0] !=
	       15'd0)) ?
	       16'd1 :
	       16'd0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        r0 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r1 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r2 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r3 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r4 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r5 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r6 <= `BSV_ASSIGNMENT_DELAY 16'd0;
	r7 <= `BSV_ASSIGNMENT_DELAY 16'd0;
      end
    else
      begin
        if (r0$EN) r0 <= `BSV_ASSIGNMENT_DELAY r0$D_IN;
	if (r1$EN) r1 <= `BSV_ASSIGNMENT_DELAY r1$D_IN;
	if (r2$EN) r2 <= `BSV_ASSIGNMENT_DELAY r2$D_IN;
	if (r3$EN) r3 <= `BSV_ASSIGNMENT_DELAY r3$D_IN;
	if (r4$EN) r4 <= `BSV_ASSIGNMENT_DELAY r4$D_IN;
	if (r5$EN) r5 <= `BSV_ASSIGNMENT_DELAY r5$D_IN;
	if (r6$EN) r6 <= `BSV_ASSIGNMENT_DELAY r6$D_IN;
	if (r7$EN) r7 <= `BSV_ASSIGNMENT_DELAY r7$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    r0 = 16'hAAAA;
    r1 = 16'hAAAA;
    r2 = 16'hAAAA;
    r3 = 16'hAAAA;
    r4 = 16'hAAAA;
    r5 = 16'hAAAA;
    r6 = 16'hAAAA;
    r7 = 16'hAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFIRFilter

